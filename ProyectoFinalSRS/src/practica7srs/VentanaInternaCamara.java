/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package practica7srs;

import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamPanel;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.image.BufferedImage;

/**
 *Clase asociada a una ventana interna de cámara (webcam)
 * @author Sergi Ruiz Sánchez
 */
public class VentanaInternaCamara extends javax.swing.JInternalFrame {
    //Atributos
    /**
     * Webcam asociada
     */
    private Webcam camara = null;   

    /**
     * Consrtuctor; Le pasamos la webcam seleccionada y su calidad
     * @param cameraQuality calidad de la webcam
     * @param selectedCamera  webcam seleccionada
     */
    private VentanaInternaCamara(String cameraQuality, Webcam selectedCamera) {
        initComponents();
        camara = selectedCamera;
        
        if (camara != null) {
            
            //Solo ofrecemos 3 tipos de resolución
            
            Dimension resoluciones[] = camara.getViewSizes();

            
            Dimension res = null;
            
            if(cameraQuality == "low"){
                res = resoluciones[0];
            }
            
            else if(cameraQuality == "medium"){
                res = resoluciones[(int)(resoluciones.length/2)];
            }
            
            else{
                res = resoluciones[resoluciones.length - 1];
  
            }
            
            camara.setViewSize(res);
            
            WebcamPanel areaVisual = new WebcamPanel(camara);
            if (areaVisual != null) {
                getContentPane().add(areaVisual, BorderLayout.CENTER);
                pack();
            }
        }
    }
    
    /**
     * Constructor por defecto
     * @param selectedCamera cámara seleccionada
    */
    private VentanaInternaCamara(Webcam selectedCamera) {
        initComponents();
        camara = selectedCamera;
        
    }
    
    
    /**
     * Como los constructores son privados, llamaremos a este método 
     * cada vez que queramos generar un objeto
     * @param cameraQuality calidad de la cámara
     * @param selectedCamera webcam seleccionada
     * @return 
     */
    public static VentanaInternaCamara getInstance(String cameraQuality, Webcam selectedCamera) {
        VentanaInternaCamara v = new VentanaInternaCamara(cameraQuality, selectedCamera);
        return (v.camara != null ? v : null);
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Método para cerrar la cámaraal cerrar la ventana; Si no
     * lo implementamos, esta se quedaría abierta aunque la
     * ventana se cerrase
     * @param evt evento de cierre de la ventana
     */
    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        if(camara != null){
            camara.close();
        }
    }//GEN-LAST:event_formInternalFrameClosing

    /**
     * Método para obtener la imagen actual de la cámara
     * (hacer screenshot)
     * @return BufferedImage con la captura de pantalla
     */
    public BufferedImage getImage(){
       return (camara != null? camara.getImage() : null); 
    } 
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
