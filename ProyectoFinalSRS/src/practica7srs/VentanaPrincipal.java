/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package practica7srs;

import java.awt.Color;
import java.awt.Transparency;
import java.awt.event.MouseEvent;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.image.BufferedImage;
import java.awt.image.ConvolveOp;
import java.awt.image.RescaleOp;
import java.awt.image.Kernel;
import java.awt.image.ColorModel;
import java.awt.image.WritableRaster;
import java.awt.image.AffineTransformOp;
import java.awt.image.LookupTable;
import java.awt.image.ByteLookupTable;
import java.awt.image.ComponentColorModel;
import java.awt.image.ColorConvertOp;
import java.awt.image.DataBuffer;
import java.awt.geom.AffineTransform;
import java.awt.image.BandCombineOp;
import java.awt.image.LookupOp;
import java.awt.color.ColorSpace;
import java.io.File;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;
import javax.swing.JFileChooser;
import javax.swing.event.InternalFrameAdapter;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import sm.image.EqualizationOp;
import sm.image.KernelProducer;
import sm.image.LookupTableProducer;
import sm.image.SepiaOp;
import sm.image.TintOp;
import sm.sound.SMClipPlayer;
import sm.srs.iu.Lienzo2DFinal.figure;
import sm.srs.iu.ColorCellRender;
import sm.srs.iu.contrastCellRenderer;
import sm.srs.iu.aboutMe;
import sm.srs.imagenes.PosterizarOp;
import sm.srs.imagenes.RedOp;
import sm.srs.imagenes.redToPurple;
import sm.srs.eventos.LienzoAdapter;
import java.awt.Image;
import javax.swing.ImageIcon;
import sm.sound.SMSoundRecorder;
import javax.sound.sampled.LineListener;
import javax.sound.sampled.LineEvent;
import sm.srs.iu.Resize;
import sm.srs.iu.TypeOfWebcamQuality;
import com.github.sarxos.webcam.Webcam;
import java.awt.event.MouseListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseMotionListener;
import javax.swing.JColorChooser;
import sm.srs.eventos.LienzoEvent;

/**
 *Clase relativa a la ventana principal del proyecto
 * @author Sergi Ruiz Sánchez
 */
public class VentanaPrincipal extends javax.swing.JFrame {
    //Atributos
    /**
     * Declaramos el manejador de la ventana interna
     */
    private ManejadorVentanaInternaImagen manejadorVI;
/**
 * Manejador de la ventana interna de vídeo
 */    
    private ManejadorVentanaInternaVideo manejadorVV; 
    /**
     * Para manejar el evento de cerrar la ventana de resize
     */
    private ManejadorResize manejadorRe;    
    /**
     * Para manejar la calida de la webcam
     */
    private ManejadorCalidad manejadorCa; 
    /**
     * Para mostrar las coordenadas al movernos por el lienzo
     */
    private ManejadorLienzo manejadorCanvas; 
    /**
     * Parámetros de altura y anchura, para modificarlos al realizar la redimensión, también públicos por problemas al hacer display
     */
    public int width = 300; 
    public int height = 300;
    private BufferedImage originalImage = null;
    SMClipPlayer player = null;
    SMSoundRecorder recorder = null;
    /**
     * variable para saber si se está reproduciendo o no el sonido
     */
    boolean playing = false; 
    /**
     * Variable para saber is se está grabando o no el sonido
     */
    boolean recording = false; 
    /**
     * Variable donde almacenamos la grabación
     */
    File temporalFile = null;  
    /**
     * Hebra para ver el tiempo de grabación
     */
    HebraTiempo recordingTime = null; 
    /**
     * Hebra para ver el tiempo de reproducción
     */ 
    HebraTiempo playingTime = null; 
    /**
     * Almacenamos la calidad de la cámara
     */
    String cameraQuality = null; 

    
    public VentanaPrincipal() {
        initComponents();
        manejadorVI = new ManejadorVentanaInternaImagen();
        manejadorRe = new ManejadorResize();
        manejadorCa = new ManejadorCalidad();
        manejadorCanvas = new ManejadorLienzo();
        manejadorVV = new ManejadorVentanaInternaVideo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileOptionsGroup = new javax.swing.ButtonGroup();
        shapeOptionsGroup = new javax.swing.ButtonGroup();
        toolBar = new javax.swing.JToolBar();
        newFile = new javax.swing.JButton();
        openFile = new javax.swing.JButton();
        saveFile = new javax.swing.JButton();
        duplicateCanvas = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        line = new javax.swing.JToggleButton();
        rectangle = new javax.swing.JToggleButton();
        oval = new javax.swing.JToggleButton();
        edit = new javax.swing.JToggleButton();
        typeOfLine = new javax.swing.JComboBox<>();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        Color colors[] = {Color.BLACK,Color.RED,Color.WHITE,Color.YELLOW,Color.GREEN,Color.BLUE};
        comboBoxColors = new javax.swing.JComboBox<>(colors);
        comboBoxBorder = new javax.swing.JComboBox<>(colors);
        newColorFill = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        newColorBorder = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        spinner = new javax.swing.JSpinner();
        refill = new javax.swing.JToggleButton();
        smooth = new javax.swing.JToggleButton();
        transparency = new javax.swing.JToggleButton();
        transparencySlider = new javax.swing.JSlider();
        jSeparator9 = new javax.swing.JToolBar.Separator();
        jPanel6 = new javax.swing.JPanel();
        gradientButton = new javax.swing.JToggleButton();
        comboBoxGradientType = new javax.swing.JComboBox<>();
        jSeparator12 = new javax.swing.JToolBar.Separator();
        impressFiguresInCanvasButton = new javax.swing.JButton();
        bottomPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        typeOfDraw = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        coordinates = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        toolBarOperations = new javax.swing.JToolBar();
        jLabel2 = new javax.swing.JLabel();
        RescaleSlider = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        String values[] = {"normal","iluminacion","oscurecimiento","negativo"};
        comboBoxContrast = new javax.swing.JComboBox<>(values);
        jSeparator4 = new javax.swing.JToolBar.Separator();
        selectMask = new javax.swing.JComboBox<>();
        jSeparator5 = new javax.swing.JToolBar.Separator();
        rotationSlider = new javax.swing.JSlider();
        rotate90 = new javax.swing.JButton();
        rotate180 = new javax.swing.JButton();
        rotate270 = new javax.swing.JButton();
        jSeparator6 = new javax.swing.JToolBar.Separator();
        jPanel13 = new javax.swing.JPanel();
        squareButton = new javax.swing.JButton();
        mSlider = new javax.swing.JSlider();
        bandCombine = new javax.swing.JButton();
        tint = new javax.swing.JButton();
        tintSlider = new javax.swing.JSlider();
        sepia = new javax.swing.JButton();
        equalize = new javax.swing.JButton();
        redFilter = new javax.swing.JButton();
        redSlider = new javax.swing.JSlider();
        poster = new javax.swing.JSlider();
        jSeparator10 = new javax.swing.JToolBar.Separator();
        jPanel20 = new javax.swing.JPanel();
        showBands = new javax.swing.JButton();
        changeColorSpace = new javax.swing.JComboBox<>();
        jSeparator8 = new javax.swing.JToolBar.Separator();
        jPanel17 = new javax.swing.JPanel();
        scaleBigger = new javax.swing.JButton();
        scaleSmaller = new javax.swing.JButton();
        jSeparator13 = new javax.swing.JToolBar.Separator();
        softNegativeSlider = new javax.swing.JSlider();
        jSeparator14 = new javax.swing.JToolBar.Separator();
        redToPurpleSlider = new javax.swing.JSlider();
        jPanel1 = new javax.swing.JPanel();
        toolBarAudioVideo = new javax.swing.JToolBar();
        play = new javax.swing.JButton();
        stop = new javax.swing.JButton();
        playlist = new javax.swing.JComboBox<>();
        jPanel5 = new javax.swing.JPanel();
        timePlayed = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jSeparator7 = new javax.swing.JToolBar.Separator();
        record = new javax.swing.JButton();
        timeRecorded = new javax.swing.JLabel();
        jSeparator11 = new javax.swing.JToolBar.Separator();
        camera = new javax.swing.JButton();
        screenshot = new javax.swing.JButton();
        desktop = new javax.swing.JDesktopPane();
        menuBar = new javax.swing.JMenuBar();
        File = new javax.swing.JMenu();
        neew = new javax.swing.JMenuItem();
        Open = new javax.swing.JMenuItem();
        save = new javax.swing.JMenuItem();
        edition = new javax.swing.JMenu();
        seeState = new javax.swing.JCheckBoxMenuItem();
        seeAudiovideo = new javax.swing.JCheckBoxMenuItem();
        seeOperations = new javax.swing.JCheckBoxMenuItem();
        seeShapes = new javax.swing.JCheckBoxMenuItem();
        image = new javax.swing.JMenu();
        Resize = new javax.swing.JMenuItem();
        help = new javax.swing.JMenu();
        aboutMe = new javax.swing.JMenuItem();

        FormListener formListener = new FormListener();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1530, 850));
        addMouseListener(formListener);

        toolBar.setRollover(true);
        toolBar.setPreferredSize(new java.awt.Dimension(150, 40));

        newFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/iconos/nuevo.png"))); // NOI18N
        newFile.setToolTipText(" Crear nuevo lienzo en blanco");
        newFile.setFocusable(false);
        newFile.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        newFile.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        newFile.addActionListener(formListener);
        toolBar.add(newFile);

        openFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/iconos/abrir.png"))); // NOI18N
        openFile.setToolTipText("Abrir una imagen");
        openFile.setFocusable(false);
        openFile.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        openFile.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        openFile.addActionListener(formListener);
        toolBar.add(openFile);

        saveFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/iconos/guardar.png"))); // NOI18N
        saveFile.setToolTipText("Guardar imagen");
        saveFile.setFocusable(false);
        saveFile.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveFile.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveFile.addActionListener(formListener);
        toolBar.add(saveFile);

        duplicateCanvas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/iconos/duplicar.png"))); // NOI18N
        duplicateCanvas.setToolTipText("Duplicar lienzo");
        duplicateCanvas.setFocusable(false);
        duplicateCanvas.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        duplicateCanvas.setPreferredSize(new java.awt.Dimension(34, 34));
        duplicateCanvas.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        duplicateCanvas.addActionListener(formListener);
        toolBar.add(duplicateCanvas);
        toolBar.add(jSeparator1);

        shapeOptionsGroup.add(line);
        line.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/iconos/linea.png"))); // NOI18N
        line.setToolTipText("Recta");
        line.setFocusable(false);
        line.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        line.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        line.addActionListener(formListener);
        toolBar.add(line);

        shapeOptionsGroup.add(rectangle);
        rectangle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/iconos/rectangulo.png"))); // NOI18N
        rectangle.setToolTipText("Rectángulo");
        rectangle.setFocusable(false);
        rectangle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rectangle.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rectangle.addActionListener(formListener);
        toolBar.add(rectangle);

        shapeOptionsGroup.add(oval);
        oval.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/iconos/elipse.png"))); // NOI18N
        oval.setToolTipText("Elipse");
        oval.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        oval.setFocusable(false);
        oval.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        oval.setPreferredSize(new java.awt.Dimension(36, 36));
        oval.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        oval.addActionListener(formListener);
        toolBar.add(oval);

        shapeOptionsGroup.add(edit);
        edit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/iconos/seleccion.png"))); // NOI18N
        edit.setToolTipText("Editar");
        edit.setFocusable(false);
        edit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        edit.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        edit.addActionListener(formListener);
        toolBar.add(edit);

        typeOfLine.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Línea continua", "línea punteada" }));
        typeOfLine.addActionListener(formListener);
        toolBar.add(typeOfLine);
        toolBar.add(jSeparator2);

        comboBoxColors.setToolTipText("Color del relleno");
        comboBoxColors.setPreferredSize(new java.awt.Dimension(50, 28));
        comboBoxColors.setRenderer(new ColorCellRender());
        comboBoxColors.addActionListener(formListener);
        toolBar.add(comboBoxColors);

        comboBoxBorder.setToolTipText("Color del borde");
        comboBoxBorder.setPreferredSize(new java.awt.Dimension(50, 28));
        comboBoxBorder.setRenderer(new ColorCellRender());
        comboBoxBorder.addActionListener(formListener);
        toolBar.add(comboBoxBorder);

        newColorFill.setBackground(new java.awt.Color(0, 0, 0));
        newColorFill.setToolTipText("Cambiar color relleno");
        newColorFill.setOpaque(true);
        newColorFill.setPreferredSize(new java.awt.Dimension(34, 34));
        newColorFill.addActionListener(formListener);
        toolBar.add(newColorFill);

        jPanel8.setPreferredSize(new java.awt.Dimension(10, 10));
        toolBar.add(jPanel8);

        newColorBorder.setBackground(java.awt.Color.black);
        newColorBorder.setToolTipText("Cambiar color borde");
        newColorBorder.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        newColorBorder.setOpaque(true);
        newColorBorder.setPreferredSize(new java.awt.Dimension(34, 34));
        newColorBorder.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        newColorBorder.addActionListener(formListener);
        toolBar.add(newColorBorder);
        toolBar.add(jSeparator3);

        spinner.setToolTipText("Grosor del trazo");
        spinner.setPreferredSize(new java.awt.Dimension(50, 30));
        spinner.setValue(1);
        spinner.addChangeListener(formListener);
        toolBar.add(spinner);

        refill.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/iconos/rellenar.png"))); // NOI18N
        refill.setToolTipText("Relleno");
        refill.setFocusable(false);
        refill.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        refill.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        refill.addActionListener(formListener);
        toolBar.add(refill);

        smooth.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/iconos/alisar.png"))); // NOI18N
        smooth.setToolTipText("Alisar");
        smooth.setFocusable(false);
        smooth.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        smooth.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        smooth.addActionListener(formListener);
        toolBar.add(smooth);

        transparency.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/iconos/transparencia.png"))); // NOI18N
        transparency.setToolTipText("Transparencia");
        transparency.setFocusable(false);
        transparency.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        transparency.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        transparency.addActionListener(formListener);
        toolBar.add(transparency);

        transparencySlider.setToolTipText("Variar transparencia");
        transparencySlider.setPreferredSize(new java.awt.Dimension(100, 46));
        transparencySlider.addChangeListener(formListener);
        transparencySlider.addFocusListener(formListener);
        toolBar.add(transparencySlider);
        toolBar.add(jSeparator9);
        toolBar.add(jPanel6);

        gradientButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/iconos/gradient-24px.png"))); // NOI18N
        gradientButton.setToolTipText("Gradiente");
        gradientButton.setFocusable(false);
        gradientButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        gradientButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        gradientButton.addActionListener(formListener);
        toolBar.add(gradientButton);

        comboBoxGradientType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Horizontal", "Vertical" }));
        comboBoxGradientType.setToolTipText("Tipo de gradiente");
        comboBoxGradientType.setPreferredSize(new java.awt.Dimension(140, 28));
        comboBoxGradientType.addActionListener(formListener);
        toolBar.add(comboBoxGradientType);
        toolBar.add(jSeparator12);

        impressFiguresInCanvasButton.setText("Volcar figuras");
        impressFiguresInCanvasButton.setToolTipText("Volcar las figuras en la imagen");
        impressFiguresInCanvasButton.setFocusable(false);
        impressFiguresInCanvasButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        impressFiguresInCanvasButton.setPreferredSize(new java.awt.Dimension(107, 34));
        impressFiguresInCanvasButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        impressFiguresInCanvasButton.addActionListener(formListener);
        toolBar.add(impressFiguresInCanvasButton);

        getContentPane().add(toolBar, java.awt.BorderLayout.PAGE_START);

        bottomPanel.setPreferredSize(new java.awt.Dimension(400, 60));
        bottomPanel.setLayout(new java.awt.BorderLayout());

        jPanel2.setPreferredSize(new java.awt.Dimension(100, 20));
        jPanel2.setLayout(new java.awt.BorderLayout());

        typeOfDraw.setPreferredSize(new java.awt.Dimension(100, 18));
        jPanel2.add(typeOfDraw, java.awt.BorderLayout.LINE_START);

        jPanel3.setPreferredSize(new java.awt.Dimension(100, 5));
        jPanel2.add(jPanel3, java.awt.BorderLayout.PAGE_END);

        coordinates.setPreferredSize(new java.awt.Dimension(200, 18));
        jPanel2.add(coordinates, java.awt.BorderLayout.LINE_END);

        jPanel4.setPreferredSize(new java.awt.Dimension(100, 40));
        jPanel4.setLayout(new java.awt.BorderLayout());

        toolBarOperations.setRollover(true);
        toolBarOperations.setPreferredSize(new java.awt.Dimension(100, 35));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/iconos/brillominimo.png"))); // NOI18N
        jLabel2.setPreferredSize(new java.awt.Dimension(25, 25));
        toolBarOperations.add(jLabel2);

        RescaleSlider.setMaximum(255);
        RescaleSlider.setMinimum(-255);
        RescaleSlider.setToolTipText("Variar brillo");
        RescaleSlider.setValue(0);
        RescaleSlider.setName(""); // NOI18N
        RescaleSlider.setPreferredSize(new java.awt.Dimension(100, 46));
        RescaleSlider.addChangeListener(formListener);
        RescaleSlider.addFocusListener(formListener);
        toolBarOperations.add(RescaleSlider);
        RescaleSlider.getAccessibleContext().setAccessibleName("");

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/iconos/brillomaximo.png"))); // NOI18N
        jLabel1.setPreferredSize(new java.awt.Dimension(25, 25));
        toolBarOperations.add(jLabel1);

        comboBoxContrast.setToolTipText("Contraste (normal,iluminado,oscurecido,negativo)");
        comboBoxContrast.setPreferredSize(new java.awt.Dimension(50, 28));
        comboBoxContrast.setRenderer(new contrastCellRenderer());
        comboBoxContrast.addActionListener(formListener);
        toolBarOperations.add(comboBoxContrast);
        toolBarOperations.add(jSeparator4);

        selectMask.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "media", "media 5x5", "media 7x7", "binomial", "enfoque", "relieve", "laplaciano" }));
        selectMask.setToolTipText("Tipos de filtro");
        selectMask.setPreferredSize(new java.awt.Dimension(100, 28));
        selectMask.addActionListener(formListener);
        toolBarOperations.add(selectMask);
        toolBarOperations.add(jSeparator5);

        rotationSlider.setMaximum(180);
        rotationSlider.setMinimum(-180);
        rotationSlider.setToolTipText("Ajustar rotación");
        rotationSlider.setValue(0);
        rotationSlider.setPreferredSize(new java.awt.Dimension(80, 20));
        rotationSlider.addChangeListener(formListener);
        rotationSlider.addFocusListener(formListener);
        toolBarOperations.add(rotationSlider);

        rotate90.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/iconos/rotacion90.png"))); // NOI18N
        rotate90.setToolTipText("Rotar 90º");
        rotate90.setPreferredSize(new java.awt.Dimension(30, 25));
        rotate90.addActionListener(formListener);
        toolBarOperations.add(rotate90);

        rotate180.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/iconos/rotacion180.png"))); // NOI18N
        rotate180.setToolTipText("Rotar 180º");
        rotate180.setPreferredSize(new java.awt.Dimension(30, 25));
        rotate180.addActionListener(formListener);
        toolBarOperations.add(rotate180);

        rotate270.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/iconos/rotacion270.png"))); // NOI18N
        rotate270.setToolTipText("Rotar 270º");
        rotate270.setPreferredSize(new java.awt.Dimension(30, 25));
        rotate270.addActionListener(formListener);
        toolBarOperations.add(rotate270);
        toolBarOperations.add(jSeparator6);

        jPanel13.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jPanel13.setPreferredSize(new java.awt.Dimension(580, 38));

        squareButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/iconos/cuadratica.png"))); // NOI18N
        squareButton.setToolTipText("Función cuadrática");
        squareButton.setPreferredSize(new java.awt.Dimension(30, 25));
        squareButton.addActionListener(formListener);
        jPanel13.add(squareButton);

        mSlider.setMaximum(255);
        mSlider.setToolTipText("Variar el valor de \"m\" en la función cuadrática");
        mSlider.setValue(128);
        mSlider.setPreferredSize(new java.awt.Dimension(100, 25));
        mSlider.addChangeListener(formListener);
        mSlider.addFocusListener(formListener);
        jPanel13.add(mSlider);

        bandCombine.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/iconos/combinar.png"))); // NOI18N
        bandCombine.setToolTipText("Combinar bandas");
        bandCombine.setPreferredSize(new java.awt.Dimension(30, 25));
        bandCombine.addActionListener(formListener);
        jPanel13.add(bandCombine);

        tint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/iconos/tintar.png"))); // NOI18N
        tint.setToolTipText("Tintar");
        tint.setPreferredSize(new java.awt.Dimension(30, 25));
        tint.addActionListener(formListener);
        jPanel13.add(tint);

        tintSlider.setToolTipText("Nivel de tinte entre 0 y 1");
        tintSlider.setMinimumSize(new java.awt.Dimension(26, 30));
        tintSlider.setPreferredSize(new java.awt.Dimension(80, 25));
        tintSlider.addChangeListener(formListener);
        tintSlider.addFocusListener(formListener);
        jPanel13.add(tintSlider);

        sepia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/iconos/sepia.png"))); // NOI18N
        sepia.setToolTipText("sepia");
        sepia.setPreferredSize(new java.awt.Dimension(30, 25));
        sepia.addActionListener(formListener);
        jPanel13.add(sepia);

        equalize.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/iconos/ecualizar.png"))); // NOI18N
        equalize.setToolTipText("ecualizar");
        equalize.setPreferredSize(new java.awt.Dimension(30, 25));
        equalize.addActionListener(formListener);
        jPanel13.add(equalize);

        redFilter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/iconos/rojo.png"))); // NOI18N
        redFilter.setToolTipText("Filtro rojo");
        redFilter.setPreferredSize(new java.awt.Dimension(30, 25));
        redFilter.addActionListener(formListener);
        jPanel13.add(redFilter);

        redSlider.setMaximum(256);
        redSlider.setMinimum(1);
        redSlider.setToolTipText("nivel de rojo");
        redSlider.setValue(128);
        redSlider.setPreferredSize(new java.awt.Dimension(80, 25));
        redSlider.addChangeListener(formListener);
        redSlider.addFocusListener(formListener);
        jPanel13.add(redSlider);

        poster.setMaximum(20);
        poster.setMinimum(2);
        poster.setToolTipText("Posterización");
        poster.setValue(11);
        poster.setPreferredSize(new java.awt.Dimension(80, 25));
        poster.addChangeListener(formListener);
        poster.addFocusListener(formListener);
        jPanel13.add(poster);

        toolBarOperations.add(jPanel13);
        toolBarOperations.add(jSeparator10);

        jPanel20.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jPanel20.setPreferredSize(new java.awt.Dimension(120, 35));

        showBands.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/iconos/bandas.png"))); // NOI18N
        showBands.setToolTipText("Mostrar bandas");
        showBands.setPreferredSize(new java.awt.Dimension(30, 25));
        showBands.addActionListener(formListener);
        jPanel20.add(showBands);

        changeColorSpace.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "sRGB", "YCC", "Grey" }));
        changeColorSpace.setToolTipText("Tipos de espacio de color");
        changeColorSpace.setPreferredSize(new java.awt.Dimension(70, 28));
        changeColorSpace.addActionListener(formListener);
        jPanel20.add(changeColorSpace);

        toolBarOperations.add(jPanel20);
        toolBarOperations.add(jSeparator8);

        jPanel17.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jPanel17.setPreferredSize(new java.awt.Dimension(80, 35));

        scaleBigger.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/iconos/aumentar.png"))); // NOI18N
        scaleBigger.setToolTipText("Ampliar imagen");
        scaleBigger.setPreferredSize(new java.awt.Dimension(30, 25));
        scaleBigger.addActionListener(formListener);
        jPanel17.add(scaleBigger);

        scaleSmaller.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/iconos/disminuir.png"))); // NOI18N
        scaleSmaller.setToolTipText("Reducir imagen");
        scaleSmaller.setPreferredSize(new java.awt.Dimension(30, 25));
        scaleSmaller.addActionListener(formListener);
        jPanel17.add(scaleSmaller);

        toolBarOperations.add(jPanel17);
        toolBarOperations.add(jSeparator13);

        softNegativeSlider.setMaximum(255);
        softNegativeSlider.setMinimum(1);
        softNegativeSlider.setToolTipText("nivel de suavizado del negativo");
        softNegativeSlider.setValue(128);
        softNegativeSlider.setPreferredSize(new java.awt.Dimension(80, 25));
        softNegativeSlider.addChangeListener(formListener);
        softNegativeSlider.addFocusListener(formListener);
        toolBarOperations.add(softNegativeSlider);
        toolBarOperations.add(jSeparator14);

        redToPurpleSlider.setMaximum(256);
        redToPurpleSlider.setToolTipText("nivel de rojo a convertir a morado");
        redToPurpleSlider.setValue(128);
        redToPurpleSlider.setPreferredSize(new java.awt.Dimension(80, 25));
        redToPurpleSlider.addChangeListener(formListener);
        redToPurpleSlider.addFocusListener(formListener);
        toolBarOperations.add(redToPurpleSlider);

        jPanel4.add(toolBarOperations, java.awt.BorderLayout.CENTER);

        jPanel2.add(jPanel4, java.awt.BorderLayout.PAGE_START);

        bottomPanel.add(jPanel2, java.awt.BorderLayout.CENTER);

        getContentPane().add(bottomPanel, java.awt.BorderLayout.PAGE_END);

        jPanel1.setLayout(new java.awt.BorderLayout());

        toolBarAudioVideo.setRollover(true);
        toolBarAudioVideo.setPreferredSize(new java.awt.Dimension(100, 35));

        play.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/iconos/play24x24.png"))); // NOI18N
        play.setFocusable(false);
        play.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        play.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        play.addActionListener(formListener);
        toolBarAudioVideo.add(play);

        stop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/iconos/stop24x24.png"))); // NOI18N
        stop.setFocusable(false);
        stop.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        stop.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        stop.addActionListener(formListener);
        toolBarAudioVideo.add(stop);

        playlist.setPreferredSize(new java.awt.Dimension(120, 28));
        toolBarAudioVideo.add(playlist);

        jPanel5.setPreferredSize(new java.awt.Dimension(3, 3));
        toolBarAudioVideo.add(jPanel5);

        timePlayed.setText("00:00 / 00:00");
        timePlayed.setPreferredSize(new java.awt.Dimension(85, 18));
        toolBarAudioVideo.add(timePlayed);

        jPanel7.setPreferredSize(new java.awt.Dimension(3, 3));
        toolBarAudioVideo.add(jPanel7);
        toolBarAudioVideo.add(jSeparator7);

        record.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/iconos/record24x24.png"))); // NOI18N
        record.setFocusable(false);
        record.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        record.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        record.addActionListener(formListener);
        toolBarAudioVideo.add(record);

        timeRecorded.setText("00:00");
        toolBarAudioVideo.add(timeRecorded);
        toolBarAudioVideo.add(jSeparator11);

        camera.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/iconos/Camara.png"))); // NOI18N
        camera.setToolTipText("Abrir cámara");
        camera.setFocusable(false);
        camera.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        camera.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        camera.addActionListener(formListener);
        toolBarAudioVideo.add(camera);

        screenshot.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/iconos/Capturar.png"))); // NOI18N
        screenshot.setToolTipText("Realizar captura");
        screenshot.setFocusable(false);
        screenshot.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        screenshot.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        screenshot.addActionListener(formListener);
        toolBarAudioVideo.add(screenshot);

        jPanel1.add(toolBarAudioVideo, java.awt.BorderLayout.PAGE_START);
        jPanel1.add(desktop, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        File.setText("Archivo");

        neew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/iconos/nuevo.png"))); // NOI18N
        neew.setText("Nuevo");
        neew.addActionListener(formListener);
        File.add(neew);

        Open.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/iconos/AbrirVideo.png"))); // NOI18N
        Open.setText("Abrir");
        Open.addActionListener(formListener);
        File.add(Open);

        save.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/iconos/guardar.png"))); // NOI18N
        save.setText("Guardar");
        save.addActionListener(formListener);
        File.add(save);

        menuBar.add(File);

        edition.setText("Edición");

        seeState.setSelected(true);
        seeState.setText("Ver barra de estado");
        seeState.addActionListener(formListener);
        edition.add(seeState);

        seeAudiovideo.setSelected(true);
        seeAudiovideo.setText("ver menú de audio/video");
        seeAudiovideo.addActionListener(formListener);
        edition.add(seeAudiovideo);

        seeOperations.setSelected(true);
        seeOperations.setText("ver menú de operaciones");
        seeOperations.addActionListener(formListener);
        edition.add(seeOperations);

        seeShapes.setSelected(true);
        seeShapes.setText("Ver menu de formas");
        seeShapes.addActionListener(formListener);
        edition.add(seeShapes);

        menuBar.add(edition);

        image.setText("Imagen");

        Resize.setText("Tamaño nueva imagen");
        Resize.addActionListener(formListener);
        image.add(Resize);

        menuBar.add(image);

        help.setText("Ayuda");

        aboutMe.setText("Acerca de");
        aboutMe.addActionListener(formListener);
        help.add(aboutMe);

        menuBar.add(help);

        setJMenuBar(menuBar);

        pack();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener, java.awt.event.FocusListener, java.awt.event.MouseListener, javax.swing.event.ChangeListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == newFile) {
                VentanaPrincipal.this.newFileActionPerformed(evt);
            }
            else if (evt.getSource() == openFile) {
                VentanaPrincipal.this.openFileActionPerformed(evt);
            }
            else if (evt.getSource() == saveFile) {
                VentanaPrincipal.this.saveFileActionPerformed(evt);
            }
            else if (evt.getSource() == duplicateCanvas) {
                VentanaPrincipal.this.duplicateCanvasActionPerformed(evt);
            }
            else if (evt.getSource() == line) {
                VentanaPrincipal.this.lineActionPerformed(evt);
            }
            else if (evt.getSource() == rectangle) {
                VentanaPrincipal.this.rectangleActionPerformed(evt);
            }
            else if (evt.getSource() == oval) {
                VentanaPrincipal.this.ovalActionPerformed(evt);
            }
            else if (evt.getSource() == edit) {
                VentanaPrincipal.this.editActionPerformed(evt);
            }
            else if (evt.getSource() == typeOfLine) {
                VentanaPrincipal.this.typeOfLineActionPerformed(evt);
            }
            else if (evt.getSource() == comboBoxColors) {
                VentanaPrincipal.this.comboBoxColorsActionPerformed(evt);
            }
            else if (evt.getSource() == comboBoxBorder) {
                VentanaPrincipal.this.comboBoxBorderActionPerformed(evt);
            }
            else if (evt.getSource() == newColorFill) {
                VentanaPrincipal.this.newColorFillActionPerformed(evt);
            }
            else if (evt.getSource() == newColorBorder) {
                VentanaPrincipal.this.newColorBorderActionPerformed(evt);
            }
            else if (evt.getSource() == refill) {
                VentanaPrincipal.this.refillActionPerformed(evt);
            }
            else if (evt.getSource() == smooth) {
                VentanaPrincipal.this.smoothActionPerformed(evt);
            }
            else if (evt.getSource() == transparency) {
                VentanaPrincipal.this.transparencyActionPerformed(evt);
            }
            else if (evt.getSource() == gradientButton) {
                VentanaPrincipal.this.gradientButtonActionPerformed(evt);
            }
            else if (evt.getSource() == comboBoxGradientType) {
                VentanaPrincipal.this.comboBoxGradientTypeActionPerformed(evt);
            }
            else if (evt.getSource() == impressFiguresInCanvasButton) {
                VentanaPrincipal.this.impressFiguresInCanvasButtonActionPerformed(evt);
            }
            else if (evt.getSource() == comboBoxContrast) {
                VentanaPrincipal.this.comboBoxContrastActionPerformed(evt);
            }
            else if (evt.getSource() == selectMask) {
                VentanaPrincipal.this.selectMaskActionPerformed(evt);
            }
            else if (evt.getSource() == rotate90) {
                VentanaPrincipal.this.rotate90ActionPerformed(evt);
            }
            else if (evt.getSource() == rotate180) {
                VentanaPrincipal.this.rotate180ActionPerformed(evt);
            }
            else if (evt.getSource() == rotate270) {
                VentanaPrincipal.this.rotate270ActionPerformed(evt);
            }
            else if (evt.getSource() == squareButton) {
                VentanaPrincipal.this.squareButtonActionPerformed(evt);
            }
            else if (evt.getSource() == bandCombine) {
                VentanaPrincipal.this.bandCombineActionPerformed(evt);
            }
            else if (evt.getSource() == tint) {
                VentanaPrincipal.this.tintActionPerformed(evt);
            }
            else if (evt.getSource() == sepia) {
                VentanaPrincipal.this.sepiaActionPerformed(evt);
            }
            else if (evt.getSource() == equalize) {
                VentanaPrincipal.this.equalizeActionPerformed(evt);
            }
            else if (evt.getSource() == redFilter) {
                VentanaPrincipal.this.redFilterActionPerformed(evt);
            }
            else if (evt.getSource() == showBands) {
                VentanaPrincipal.this.showBandsActionPerformed(evt);
            }
            else if (evt.getSource() == changeColorSpace) {
                VentanaPrincipal.this.changeColorSpaceActionPerformed(evt);
            }
            else if (evt.getSource() == scaleBigger) {
                VentanaPrincipal.this.scaleBiggerActionPerformed(evt);
            }
            else if (evt.getSource() == scaleSmaller) {
                VentanaPrincipal.this.scaleSmallerActionPerformed(evt);
            }
            else if (evt.getSource() == play) {
                VentanaPrincipal.this.playActionPerformed(evt);
            }
            else if (evt.getSource() == stop) {
                VentanaPrincipal.this.stopActionPerformed(evt);
            }
            else if (evt.getSource() == record) {
                VentanaPrincipal.this.recordActionPerformed(evt);
            }
            else if (evt.getSource() == camera) {
                VentanaPrincipal.this.cameraActionPerformed(evt);
            }
            else if (evt.getSource() == screenshot) {
                VentanaPrincipal.this.screenshotActionPerformed(evt);
            }
            else if (evt.getSource() == neew) {
                VentanaPrincipal.this.neewActionPerformed(evt);
            }
            else if (evt.getSource() == Open) {
                VentanaPrincipal.this.OpenActionPerformed(evt);
            }
            else if (evt.getSource() == save) {
                VentanaPrincipal.this.saveActionPerformed(evt);
            }
            else if (evt.getSource() == seeState) {
                VentanaPrincipal.this.seeStateActionPerformed(evt);
            }
            else if (evt.getSource() == seeAudiovideo) {
                VentanaPrincipal.this.seeAudiovideoActionPerformed(evt);
            }
            else if (evt.getSource() == seeOperations) {
                VentanaPrincipal.this.seeOperationsActionPerformed(evt);
            }
            else if (evt.getSource() == seeShapes) {
                VentanaPrincipal.this.seeShapesActionPerformed(evt);
            }
            else if (evt.getSource() == Resize) {
                VentanaPrincipal.this.ResizeActionPerformed(evt);
            }
            else if (evt.getSource() == aboutMe) {
                VentanaPrincipal.this.aboutMeActionPerformed(evt);
            }
        }

        public void focusGained(java.awt.event.FocusEvent evt) {
            if (evt.getSource() == transparencySlider) {
                VentanaPrincipal.this.transparencySliderFocusGained(evt);
            }
            else if (evt.getSource() == RescaleSlider) {
                VentanaPrincipal.this.RescaleSliderFocusGained(evt);
            }
            else if (evt.getSource() == rotationSlider) {
                VentanaPrincipal.this.rotationSliderFocusGained(evt);
            }
            else if (evt.getSource() == mSlider) {
                VentanaPrincipal.this.mSliderFocusGained(evt);
            }
            else if (evt.getSource() == tintSlider) {
                VentanaPrincipal.this.tintSliderFocusGained(evt);
            }
            else if (evt.getSource() == redSlider) {
                VentanaPrincipal.this.redSliderFocusGained(evt);
            }
            else if (evt.getSource() == poster) {
                VentanaPrincipal.this.posterFocusGained(evt);
            }
            else if (evt.getSource() == softNegativeSlider) {
                VentanaPrincipal.this.softNegativeSliderFocusGained(evt);
            }
            else if (evt.getSource() == redToPurpleSlider) {
                VentanaPrincipal.this.redToPurpleSliderFocusGained(evt);
            }
        }

        public void focusLost(java.awt.event.FocusEvent evt) {
            if (evt.getSource() == transparencySlider) {
                VentanaPrincipal.this.transparencySliderFocusLost(evt);
            }
            else if (evt.getSource() == RescaleSlider) {
                VentanaPrincipal.this.RescaleSliderFocusLost(evt);
            }
            else if (evt.getSource() == rotationSlider) {
                VentanaPrincipal.this.rotationSliderFocusLost(evt);
            }
            else if (evt.getSource() == mSlider) {
                VentanaPrincipal.this.mSliderFocusLost(evt);
            }
            else if (evt.getSource() == tintSlider) {
                VentanaPrincipal.this.tintSliderFocusLost(evt);
            }
            else if (evt.getSource() == redSlider) {
                VentanaPrincipal.this.redSliderFocusLost(evt);
            }
            else if (evt.getSource() == poster) {
                VentanaPrincipal.this.posterFocusLost(evt);
            }
            else if (evt.getSource() == softNegativeSlider) {
                VentanaPrincipal.this.softNegativeSliderFocusLost(evt);
            }
            else if (evt.getSource() == redToPurpleSlider) {
                VentanaPrincipal.this.redToPurpleSliderFocusLost(evt);
            }
        }

        public void mouseClicked(java.awt.event.MouseEvent evt) {
            if (evt.getSource() == VentanaPrincipal.this) {
                VentanaPrincipal.this.formMouseClicked(evt);
            }
        }

        public void mouseEntered(java.awt.event.MouseEvent evt) {
        }

        public void mouseExited(java.awt.event.MouseEvent evt) {
        }

        public void mousePressed(java.awt.event.MouseEvent evt) {
        }

        public void mouseReleased(java.awt.event.MouseEvent evt) {
        }

        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            if (evt.getSource() == spinner) {
                VentanaPrincipal.this.spinnerStateChanged(evt);
            }
            else if (evt.getSource() == transparencySlider) {
                VentanaPrincipal.this.transparencySliderStateChanged(evt);
            }
            else if (evt.getSource() == RescaleSlider) {
                VentanaPrincipal.this.RescaleSliderStateChanged(evt);
            }
            else if (evt.getSource() == rotationSlider) {
                VentanaPrincipal.this.rotationSliderStateChanged(evt);
            }
            else if (evt.getSource() == mSlider) {
                VentanaPrincipal.this.mSliderStateChanged(evt);
            }
            else if (evt.getSource() == tintSlider) {
                VentanaPrincipal.this.tintSliderStateChanged(evt);
            }
            else if (evt.getSource() == redSlider) {
                VentanaPrincipal.this.redSliderStateChanged(evt);
            }
            else if (evt.getSource() == poster) {
                VentanaPrincipal.this.posterStateChanged(evt);
            }
            else if (evt.getSource() == softNegativeSlider) {
                VentanaPrincipal.this.softNegativeSliderStateChanged(evt);
            }
            else if (evt.getSource() == redToPurpleSlider) {
                VentanaPrincipal.this.redToPurpleSliderStateChanged(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents

/**
 * Clase asociada al manejador de una ventana interna de imagen,
 * haciendo que los valores de los atributos cambien al pasar de una a otra
 */
private class ManejadorVentanaInternaImagen extends InternalFrameAdapter{
    @Override
    public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt){
        
        VentanaInterna vi = (VentanaInterna)evt.getInternalFrame(); /*Cambiar los parámetros en función del lienzo actual*/
        
        
            line.setEnabled(true);
            oval.setEnabled(true);
            rectangle.setEnabled(true);
        
            refill.setSelected(vi.getCanvas().isFilled());
            edit.setSelected(vi.getCanvas().isEdit());
            smooth.setSelected(vi.getCanvas().isSmooth());
            spinner.setValue(vi.getCanvas().getThickness());
            comboBoxColors.setSelectedItem(vi.getCanvas().getFillColor());
            comboBoxBorder.setSelectedItem(vi.getCanvas().getColor());
            newColorFill.setBackground(vi.getCanvas().getFillColor());
            newColorBorder.setBackground(vi.getCanvas().getColor());
            
            
            
            if(vi.getCanvas().getGradient() == "null" | vi.getCanvas().getGradient() == null){
                gradientButton.setSelected(false);
                comboBoxGradientType.setSelectedIndex(0);
            }
            
            else{
                gradientButton.setSelected(true);
                
                if(vi.getCanvas().getGradient() == "Horizontal"){
                    comboBoxGradientType.setSelectedIndex(0);
                }
                
                else{
                   comboBoxGradientType.setSelectedIndex(1); 
                }
            }
            
            if(vi.getCanvas().getPattern() == "Línea continua"){
                typeOfLine.setSelectedIndex(0);
            }
            
            else{
                typeOfLine.setSelectedIndex(1);
            }
        
            
        if(vi.getCanvas().isEdit() == false){
            figure currentFigure = vi.getCanvas().getCurrentFigure();
         
            if(currentFigure == figure.LINE){
                line.setSelected(true);
            }
        
            else if (currentFigure == figure.OVAL){
                oval.setSelected(true);
            }
        
            else{
                rectangle.setSelected(true);
            }
        } 

    }       
}

/**
 * Clase referida a un manejador para que cuando estemos ante una venta de vídeo los botones de las figuras estén a disabled
*/
private class ManejadorVentanaInternaVideo extends InternalFrameAdapter{
    @Override
    public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt){
                
        line.setEnabled(false);
        oval.setEnabled(false);
        rectangle.setEnabled(false);
        
    }       
}

/**
 * Clase referida a un manejador para obtener los nuevos valores de tamaño del 
 * lienzo y aplicarlos
 */
private class ManejadorResize implements WindowListener{ 

        @Override
        public void windowOpened(WindowEvent e) {
        }

        @Override
        public void windowClosing(WindowEvent e) {
        }

        @Override
        public void windowClosed(WindowEvent e) {
            Resize currentWindow = (Resize)e.getWindow();
            
            if(currentWindow.doResize == true){
                width = currentWindow.width;
                height = currentWindow.height;
                
             VentanaInterna vi=(VentanaInterna) desktop.getSelectedFrame();
             
             if(vi != null){
                 vi.getCanvas().setImgSize(width, height);    
             }

             
                
            }
           
        }

        @Override
        public void windowIconified(WindowEvent e) {
        }

        @Override
        public void windowDeiconified(WindowEvent e) {
        }

        @Override
        public void windowActivated(WindowEvent e) {
        }

        @Override
        public void windowDeactivated(WindowEvent e) {
        }
}

/**
 * Clase asociada al manejador que nos va a permitir crear una 
 * ventana interna de cámara con la cámara y la calidad seleccionada
 * previamente
 */
private class ManejadorCalidad implements WindowListener{    

        @Override
        public void windowOpened(WindowEvent e) {
        }

        @Override
        public void windowClosing(WindowEvent e) {
        }

        @Override
        public void windowClosed(WindowEvent e) {
            
            TypeOfWebcamQuality currentWindow = (TypeOfWebcamQuality) e.getWindow();
            cameraQuality = currentWindow.getQuality();
            Webcam selectedWebcam = currentWindow.getWebcam();
            
            if(cameraQuality != null && selectedWebcam != null){
          
                VentanaInternaCamara vc = VentanaInternaCamara.getInstance(cameraQuality,selectedWebcam);

                if (vc != null) {
                    desktop.add(vc);
                    vc.setVisible(true);
                }

            }
                 
        }

        @Override
        public void windowIconified(WindowEvent e) {
        }

        @Override
        public void windowDeiconified(WindowEvent e) {
        }

        @Override
        public void windowActivated(WindowEvent e) {
        }

        @Override
        public void windowDeactivated(WindowEvent e) {
        }
}

   
/**
 * Clase referente al listener empleado para poder trabajar con el audio y las 
 * grabaciones
 */
private class ManejadorAudio implements LineListener {

        
        @Override
        public void update(LineEvent event) {
            if (event.getType() == LineEvent.Type.START) {
                
            }
            if (event.getType() == LineEvent.Type.STOP) {
                if(playing == true){/*Hemos llegado al final de la reproducción audio*/
                    Image image = new ImageIcon(this.getClass().getResource("/icons/iconos/play24x24.png")).getImage();
                    play.setIcon(new ImageIcon(image));
                    playing = false;
                    player = null;
                    playingTime.stopExecution();
                }
                
                if(recording == true){  /*Paramos la grabación*/
                    recordingTime.stopExecution();
                }
            }
            
            if (event.getType() == LineEvent.Type.CLOSE) {
                
            }
        }
    }

/**
 * Clase referente a los eventos que nos llegan desde el lienzo, y que
 * interactúan de alguna manera con la ventana principal
 */

private class ManejadorLienzo extends LienzoAdapter{
    
    public void setCoordinates(LienzoEvent evt) {
        if (evt.getRgb()[0] == -1 & evt.getRgb()[1] == -1 & evt.getRgb()[2] == -1) {
            coordinates.setText("("+evt.getPoint().getX()+","+evt.getPoint().getY()+")");
        }
        
        else{
            coordinates.setText("("+evt.getPoint().getX()+","+evt.getPoint().getY()+")  ["+evt.getRgb()[0]+","+evt.getRgb()[1]+","+evt.getRgb()[2]+"]");
        }
    }
    
    public void isOutside(LienzoEvent evt){
        coordinates.setText("");
    }
    
    
    public void changeParameters(LienzoEvent evt){
            refill.setSelected(evt.getIsFilled());
            smooth.setSelected(evt.getSmooth());
            spinner.setValue(evt.getThickness());
            comboBoxColors.setSelectedItem(evt.getFillColor());
            comboBoxBorder.setSelectedItem(evt.getBorderColor());
            newColorFill.setBackground(evt.getFillColor());
            newColorBorder.setBackground(evt.getBorderColor());
            
            if(evt.getTransparency() == 1.0F){
                transparency.setSelected(false);
            }
            
            
            
            if(evt.getGradient() == "null" | evt.getGradient() == null){
                gradientButton.setSelected(false);
                comboBoxGradientType.setSelectedIndex(0);
            }
            
            else{
                gradientButton.setSelected(true);
                
                if(evt.getGradient() == "Horizontal"){
                    comboBoxGradientType.setSelectedIndex(0);
                }
                
                else{
                   comboBoxGradientType.setSelectedIndex(1); 
                }
            }
            
            
            if(evt.getPattern() == "Línea continua"){
                typeOfLine.setSelectedIndex(0);
            }
            
            else{
                typeOfLine.setSelectedIndex(1);
            }
    }
}

/**
 * Clase relacionada con la hebra que empleamos para 
 * mostrar el tiempo trancurrido de grabación y/o de
 * audición de un sobido
 */ 
private class HebraTiempo extends Thread{
    private int secondsSinceBeggining = 0;  /*Segundos desde que empezó la grabación / reproducción*/
    private int minutesSinceBeggining = 0;  /*Segundos desde que empezó la grabación / reproducción*/
    private boolean execute = true; /*Variable que nos va a servir para parar la hebra*/
    private int totalTime = 0; /*Variable que almacena el total de tiempo*/
    private boolean pauseThread = false; /*Para saber si "paramos" o no la hebra*/
    
    
    public HebraTiempo(){
        
    }
    
    public HebraTiempo(int totalTime){
        this.totalTime = totalTime;
    }
    
    public void stopExecution(){
        execute = false;
    }
    
    public void pauseThread(){
        this.pauseThread = true;
    }
    
    public void resumeThread(){
        this.pauseThread = false;
    }
    public void run(){
        while(execute == true){
            
            if(this.pauseThread == false){
                
                if (totalTime == 0) {
                    //Si vale 0, es porque estamos en una grabación
                    timeRecorded.setText(getMinutes(minutesSinceBeggining) + ":" + getSeconds(secondsSinceBeggining));
                } else {
                    timePlayed.setText(getMinutes(minutesSinceBeggining) + ":" + getSeconds(secondsSinceBeggining) + "/"
                            + getMinutes(totalTime / 60) + ":" + getSeconds(totalTime % 60));
                }

                try {
                    //Dejamos pasar un segundo
                    sleep(1000);                //Como el sleep es de 1s, si se pausa e inicia muchas veces rápido puede haber desfase en el tiempo
                } catch (Exception e) {

                }

                secondsSinceBeggining += 1;
                //Añadimos un segundo al contador


                if (secondsSinceBeggining == 60) {
                    //Llevamos grabando un minuto
                    minutesSinceBeggining += 1;
                    secondsSinceBeggining = 0;
                }
                
            }
            else{   //Introducimos un sleep para que no haga tan rápidas las ejecuciones, ya que no nos permitía volver al if si este volvía a cumplirse
                try{
                    sleep(100);
                }
                
                catch(Exception e){
                    
                }
            }
            
        }
       
    }
}

/**
 * Método para obtener los minutos en el formato deseado
 * @param minutes total de minutos que dura el sonido/grabación
 * @return String minutos en el formato correcto
 */
private String getMinutes(int minutes){
    String result = "";
    
    if(minutes < 10){
        result = "0"+Integer.toString(minutes);
    }
    
    else{
        result = Integer.toString(minutes);
    }
    
    return result;
}

/**
 * Método para obtener los segundos en el formato deseado
 * @param second total de segundos que dura el sonido/grabación
 * @return String segundos en el formato correcto
 */
private String getSeconds(int seconds){
    String result = "";
    
    if(seconds < 10){
        result = "0"+Integer.toString(seconds);
    }
    
    else{
        result = Integer.toString(seconds);
    }
    
    return result;
}


    private void spinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerStateChanged
        float floatValue= Float.parseFloat(spinner.getValue().toString());
        int value = (int) floatValue;
        VentanaInterna vi;

        vi = (VentanaInterna)desktop.getSelectedFrame();
        
        
        if(vi != null){
            vi.getCanvas().setThickness(value); 
        }
        
    }//GEN-LAST:event_spinnerStateChanged

//------------------MUESTRA U OCULTA LOS DIFERENTES PANELES------------------------//
    private void seeShapesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seeShapesActionPerformed
        if(seeShapes.isSelected()){      /*Viendo el estado del checkBox oculta o no los menús*/
            toolBar.setVisible(true);
        }
        
        else{
            toolBar.setVisible(false);

        }
    }//GEN-LAST:event_seeShapesActionPerformed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
       VentanaInterna vi = (VentanaInterna)desktop.getSelectedFrame();
        
       if(vi != null){
        refill.setSelected(vi.getCanvas().isFilled()); 
        smooth.setSelected(vi.getCanvas().isSmooth());
        edit.setSelected(vi.getCanvas().isEdit());
        
        if(vi.getCanvas().isTransparency() == 0.5F){
            transparency.setSelected(true); 

        }
        
        else{
            transparency.setSelected(false); 
 
        }
        
       }
        
    }//GEN-LAST:event_formMouseClicked

    private void newFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newFileActionPerformed
       VentanaInterna vi = new VentanaInterna();
       
       vi.addInternalFrameListener(manejadorVI);
       vi.getCanvas().addLienzoListener(manejadorCanvas);
       

       
        desktop.add(vi);
        vi.setVisible(true);
        
        
        BufferedImage img;
        img = new BufferedImage(this.width,this.height,BufferedImage.TYPE_INT_ARGB);
        vi.getCanvas().setImg(img);
        



        
        vi.setTitle("Nuevo");
        
        shapeOptionsGroup.clearSelection();
        typeOfDraw.setText("");
        refill.setSelected(false);
        transparency.setSelected(false);
        edit.setSelected(false);
        smooth.setSelected(false);
        spinner.setValue(1);
        comboBoxColors.setSelectedItem(Color.BLACK);
        comboBoxBorder.setSelectedItem(Color.BLACK);
        comboBoxContrast.setSelectedItem("normal");
        

    }//GEN-LAST:event_newFileActionPerformed

    private void openFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileActionPerformed
        this.OpenActionPerformed(evt);
    }//GEN-LAST:event_openFileActionPerformed

    private void saveFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFileActionPerformed
       VentanaInterna vi=(VentanaInterna) desktop.getSelectedFrame();
        if (vi != null) {
            
            BufferedImage img = vi.getCanvas().getImg(true);
            
            if (img != null) {
                
                FileFilter filter = new FileNameExtensionFilter("Imagenes[jpg, bpm, gif, png, wbmp, jpeg", 
                            "jpg", "bpm", "gif", "png", "wbmp", "jpeg"); /*AÑADIMOS LAS EXTENSIONES PERMITIDAS*/
        
                JFileChooser dlg = new JFileChooser();
                dlg.addChoosableFileFilter(filter); /*Añadimos el filtro creado*/
                dlg.setFileFilter(filter);
        
                int resp = dlg.showSaveDialog(this);

                if( resp == JFileChooser.APPROVE_OPTION) {
                    try{
                            File f = dlg.getSelectedFile();
                            
                            String completeName = f.getName();
                            String extension = null;

                            
                            if(completeName.contains(".bpm")){   /*Si es alguna de las otras extensiones, la guardamos en esa*/
                               extension = "bpm"; 
                            }
                            
                            else if(completeName.contains(".gif")){   /*Si es alguna de las otras extensiones, la guardamos en esa*/
                               extension = "gif"; 
                            }
                            
                            else if(completeName.contains(".png")){   /*Si es alguna de las otras extensiones, la guardamos en esa*/
                               extension = "png"; 
                            }
                            
                            else if(completeName.contains(".wbpm")){   /*Si es alguna de las otras extensiones, la guardamos en esa*/
                               extension = "wbpm"; 
                            }
                            
                            else if(completeName.contains(".jpeg")){   /*Si es alguna de las otras extensiones, la guardamos en esa*/
                               extension = "jpeg"; 
                            }
                            
                            else if (completeName.contains(".jpg")){
                                extension = "jpg";
                            }
                            
                            ImageIO.write(img, extension, f);
                            vi.setTitle(f.getName());
                        }
                
                    catch (Exception ex) {
                        JOptionPane.showMessageDialog(this,"No se ha podido guardar la imagen",
                        "Error: Formato incorrecto",JOptionPane.WARNING_MESSAGE);
                    }

                }
            }

        } 
    }//GEN-LAST:event_saveFileActionPerformed

    private void editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editActionPerformed
        VentanaInterna vi;
        vi = (VentanaInterna)desktop.getSelectedFrame();
        
        if(vi != null){
            vi.getCanvas().setEdit(true); 
        }
        
        
        

    }//GEN-LAST:event_editActionPerformed

    private void lineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineActionPerformed
        VentanaInterna vi;
        vi = (VentanaInterna)desktop.getSelectedFrame();
        
        if(vi != null){
            if(vi.getCanvas().isEdit() == true){
                vi.getCanvas().setEdit(false);
            }

            vi.getCanvas().setCurrentFigure(figure.LINE);
            vi.getCanvas().setShapeSelected(false);
            typeOfDraw.setText("    Línea"); 
            
            refill.setSelected(false);
            smooth.setSelected(false);
            transparency.setSelected(false);
            gradientButton.setSelected(false);

        }
        
        
        
    }//GEN-LAST:event_lineActionPerformed

    private void rectangleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rectangleActionPerformed
        VentanaInterna vi;
        vi = (VentanaInterna)desktop.getSelectedFrame();
        
        if(vi != null){
            if(vi.getCanvas().isEdit() == true){
                vi.getCanvas().setEdit(false);
            }

            vi.getCanvas().setCurrentFigure(figure.RECTANGLE);
            vi.getCanvas().setShapeSelected(false);
            typeOfDraw.setText("    Rectángulo");
            
            refill.setSelected(false);
            smooth.setSelected(false);
            transparency.setSelected(false);
            gradientButton.setSelected(false);
            
            vi.getCanvas().setIsFilled(false);
            vi.getCanvas().setSmooth(false);
            vi.getCanvas().setTransparency(1.0F);
            vi.getCanvas().setGradient("null");
            
            
        }
        
         

    }//GEN-LAST:event_rectangleActionPerformed

    private void ovalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ovalActionPerformed
        VentanaInterna vi;
        vi = (VentanaInterna)desktop.getSelectedFrame();
        
        if(vi != null){
            if(vi.getCanvas().isEdit() == true){
                vi.getCanvas().setEdit(false);
            }

            vi.getCanvas().setCurrentFigure(figure.OVAL);
            vi.getCanvas().setShapeSelected(false);
            typeOfDraw.setText("    Óvalo"); 
            
            refill.setSelected(false);
            smooth.setSelected(false);
            transparency.setSelected(false);
            gradientButton.setSelected(false);
            
            vi.getCanvas().setIsFilled(false);
            vi.getCanvas().setSmooth(false);
            vi.getCanvas().setTransparency(1.0F);
            vi.getCanvas().setGradient("null");
            
        }
        
        
    }//GEN-LAST:event_ovalActionPerformed

    private void refillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refillActionPerformed
        VentanaInterna vi;
        vi = (VentanaInterna)desktop.getSelectedFrame();
        
        if(vi != null){
            if(this.refill.isSelected() == true){
                vi.getCanvas().setIsFilled(true);
            }
            
            else{
                vi.getCanvas().setIsFilled(false);
            }
        }
        
    }//GEN-LAST:event_refillActionPerformed

    private void transparencyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transparencyActionPerformed
        VentanaInterna vi;
        vi = (VentanaInterna)desktop.getSelectedFrame();
        
        if(vi != null){
            if(transparency.isSelected()){
                vi.getCanvas().setTransparency(3.0F);    /*Como los valores están comprendidos entre 0.0F y 1.0F, así sabremos que viene del botón*/
            }
        
            else{
                vi.getCanvas().setTransparency(2.0F);   /*Como los valores están comprendidos entre 0.0F y 1.0F, así sabremos que viene del botón*/
            }   
        }
        
    }//GEN-LAST:event_transparencyActionPerformed

    private void smoothActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smoothActionPerformed
        VentanaInterna vi;
        vi = (VentanaInterna)desktop.getSelectedFrame();
        
        if(vi != null){
            if(smooth.isSelected()){
                vi.getCanvas().setSmooth(true);
            }
        
            else{
                vi.getCanvas().setSmooth(false);
            }    
        }
    }//GEN-LAST:event_smoothActionPerformed

    private void comboBoxColorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxColorsActionPerformed
        VentanaInterna vi;
        vi = (VentanaInterna)desktop.getSelectedFrame();
        
        if(vi != null){
            if(comboBoxColors.getSelectedItem() == Color.YELLOW){
              vi.getCanvas().setRefillColor(Color.yellow);  
            }
            else if(comboBoxColors.getSelectedItem() == Color.RED){
              vi.getCanvas().setRefillColor(Color.red);  
            }
            else if(comboBoxColors.getSelectedItem() == Color.BLUE){

              vi.getCanvas().setRefillColor(Color.blue);  
            }
            else if(comboBoxColors.getSelectedItem() == Color.GREEN){

              vi.getCanvas().setRefillColor(Color.green);  
            }
            else if(comboBoxColors.getSelectedItem() == Color.WHITE){

              vi.getCanvas().setRefillColor(Color.white);  
            }
            else if (comboBoxColors.getSelectedItem() == Color.BLACK){

              vi.getCanvas().setRefillColor(Color.black);  
            }
        }
        
        
    }//GEN-LAST:event_comboBoxColorsActionPerformed

    private void ResizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResizeActionPerformed

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
        * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
        */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Resize.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Resize.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Resize.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Resize.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        Resize dialog = new Resize();
        dialog.addWindowListener(manejadorRe);

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                dialog.setVisible(true);

            }
        });

    }//GEN-LAST:event_ResizeActionPerformed

    private void RescaleSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_RescaleSliderStateChanged
        VentanaInterna vi = (VentanaInterna) (desktop.getSelectedFrame());

        float brightness = RescaleSlider.getValue();
        
        if (vi != null && originalImage != null) {
            BufferedImage img = vi.getCanvas().getImg(false);
            
            
            if(img!=null){
                try{
                    RescaleOp rop = new RescaleOp(1.0F, brightness , null);
                    rop.filter(originalImage, img);
                    desktop.repaint();
                    
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_RescaleSliderStateChanged

    private void RescaleSliderFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_RescaleSliderFocusGained
        this.focusGained();
    }//GEN-LAST:event_RescaleSliderFocusGained

    private void RescaleSliderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_RescaleSliderFocusLost
        this.focusLost();
    }//GEN-LAST:event_RescaleSliderFocusLost

    private void selectMaskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectMaskActionPerformed
        VentanaInterna vi = (VentanaInterna) (desktop.getSelectedFrame());

        if (vi != null) {
            BufferedImage img = vi.getCanvas().getImg(false);
            Kernel k = getKernel(selectMask.getSelectedIndex()); 
            
            if(img!=null && k != null){
                try{ 
                    ConvolveOp cop = new ConvolveOp(k);
                    BufferedImage imgdest = cop.filter(img, null);
                    vi.getCanvas().setImg(imgdest);
                    vi.getCanvas().repaint();

                    
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        } 
    }//GEN-LAST:event_selectMaskActionPerformed

   
    
    private void rotate90ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotate90ActionPerformed
        this.doRotation(90);
    }//GEN-LAST:event_rotate90ActionPerformed

    private void rotate180ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotate180ActionPerformed
        this.doRotation(180);
    }//GEN-LAST:event_rotate180ActionPerformed

    private void rotate270ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotate270ActionPerformed
        this.doRotation(270);
    }//GEN-LAST:event_rotate270ActionPerformed

    private void rotationSliderFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rotationSliderFocusGained
        this.focusGained();
    }//GEN-LAST:event_rotationSliderFocusGained

    private void rotationSliderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rotationSliderFocusLost
        this.focusLost();
    }//GEN-LAST:event_rotationSliderFocusLost

    private void rotationSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rotationSliderStateChanged
         VentanaInterna vi = (VentanaInterna) (desktop.getSelectedFrame());

        int rotation = rotationSlider.getValue();
        
        if (vi != null && originalImage != null) {
            BufferedImage img = vi.getCanvas().getImg(false);
            
            
            if(img!=null){
               try{
                    
                    AffineTransform at = AffineTransform.getRotateInstance(Math.toRadians(rotation),originalImage.getWidth()/2,originalImage.getHeight()/2);
                    AffineTransformOp atop = new AffineTransformOp(at,null);
                    BufferedImage imgdest = atop.filter(originalImage,null);
                    vi.getCanvas().setImg(imgdest);
                    vi.getCanvas().repaint();
                    
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                } 
            }
        }
    }//GEN-LAST:event_rotationSliderStateChanged

    private void scaleBiggerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scaleBiggerActionPerformed
       this.doScale(1.25F);
    }//GEN-LAST:event_scaleBiggerActionPerformed

    private void scaleSmallerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scaleSmallerActionPerformed
        this.doScale(0.75F);
    }//GEN-LAST:event_scaleSmallerActionPerformed

    private void squareButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_squareButtonActionPerformed
        LookupTable table = this.square(128);
        this.determineLookup(table);
    }//GEN-LAST:event_squareButtonActionPerformed

    private void mSliderFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mSliderFocusGained
        this.focusGained();
    }//GEN-LAST:event_mSliderFocusGained

    private void mSliderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mSliderFocusLost
        this.focusLost();
    }//GEN-LAST:event_mSliderFocusLost

    private void mSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_mSliderStateChanged
        VentanaInterna vi = (VentanaInterna) (desktop.getSelectedFrame());
        int m = mSlider.getValue();
        
        LookupTable table = this.square(m);
        
        if (vi != null && originalImage != null) {
            BufferedImage img = vi.getCanvas().getImg(false);
            
            
            if(img!=null){
               try{
                    
                    LookupOp lop = new LookupOp(table,null);
                    BufferedImage imgdest = lop.filter(originalImage,img);
                    vi.getCanvas().setImg(imgdest);
                    vi.getCanvas().repaint();
                    
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                } 
            }
        }  
    }//GEN-LAST:event_mSliderStateChanged

    private void bandCombineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bandCombineActionPerformed
        VentanaInterna vi = (VentanaInterna) (desktop.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getCanvas().getImg(false);
            if (img != null) {
                try {
                    float[][] matriz = {{0.0F, 0.5F, 0.5F},
                                        {0.5F, 0.0F, 0.5F},
                                        {0.5F, 0.5F, 0.0F}};
                    
                    BandCombineOp bcop = new BandCombineOp(matriz, null);
                    bcop.filter(img.getRaster(), img.getRaster());
                    vi.getCanvas().repaint();
                    
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_bandCombineActionPerformed

    private void showBandsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showBandsActionPerformed
         
        VentanaInterna vi = (VentanaInterna) (desktop.getSelectedFrame());
        if (vi != null) {
            
            this.originalImage = vi.getCanvas().getImg(false);

            if (this.originalImage != null) {
                BufferedImage imgbanda = null;
                
                for (int i = 0; i < this.originalImage.getRaster().getNumBands(); i++){
                    imgbanda = getImageBand(this.originalImage,i);
                    
                    VentanaInterna newVi = new VentanaInterna();
                    desktop.add(newVi);
                    newVi.setVisible(true);
                    newVi.setTitle("Banda "+i);
        
                    newVi.addInternalFrameListener(manejadorVI);
                    newVi.getCanvas().addLienzoListener(manejadorCanvas);

                    newVi.getCanvas().setImg(imgbanda);
                    newVi.getCanvas().repaint();                }
                
            }
            
            this.originalImage = null;
        }
        
    }//GEN-LAST:event_showBandsActionPerformed

    private void changeColorSpaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeColorSpaceActionPerformed
        VentanaInterna vi = (VentanaInterna) (desktop.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getCanvas().getImg(false);
            if (img != null) {
                
                int selected = changeColorSpace.getSelectedIndex();
                ColorSpace cs;
                
                if(selected == 0){
                    cs = ColorSpace.getInstance(ColorSpace.CS_sRGB);
                }
                
                else if(selected == 1){
                   cs = ColorSpace.getInstance(ColorSpace.CS_PYCC); 
                }
                
                else{
                  cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);  
                }
                
                
                try {   
                    
                    ColorConvertOp op = new ColorConvertOp(cs, null);
                    BufferedImage imgdest = op.filter(img, null);
                    
                    vi = new VentanaInterna();
                    desktop.add(vi);
                    vi.setVisible(true);
        
                    vi.addInternalFrameListener(manejadorVI);
                    vi.getCanvas().addLienzoListener(manejadorCanvas);

                    vi.getCanvas().setImg(imgdest);
                    vi.getCanvas().repaint();
                    
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_changeColorSpaceActionPerformed

    private void sepiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sepiaActionPerformed
        VentanaInterna vi = (VentanaInterna) desktop.getSelectedFrame();
        
        if(vi != null){
            BufferedImage img = vi.getCanvas().getImg(false);
            
            try{
                SepiaOp sepia = new SepiaOp();
                sepia.filter(img,img);
                vi.getCanvas().repaint();
            }
            catch(IllegalArgumentException e){
                 System.err.println(e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_sepiaActionPerformed

    private void tintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tintActionPerformed
        VentanaInterna vi = (VentanaInterna) desktop.getSelectedFrame();
        
        if(vi != null){
            BufferedImage img = vi.getCanvas().getImg(false);
            
            try{
                TintOp tintado = new TintOp((Color) this.comboBoxColors.getSelectedItem(),0.5f);
                tintado.filter(img,img);
                vi.getCanvas().repaint();
            }
            catch(IllegalArgumentException e){
                 System.err.println(e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_tintActionPerformed

    private void equalizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_equalizeActionPerformed
        VentanaInterna vi = (VentanaInterna) desktop.getSelectedFrame();
        
        if(vi != null){
            BufferedImage img = vi.getCanvas().getImg(false);
            
            try{
                EqualizationOp ecualizacion = new EqualizationOp();
                ecualizacion.filter(img,img);
                vi.getCanvas().repaint();
            }
            catch(IllegalArgumentException e){
                 System.err.println(e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_equalizeActionPerformed

    private void posterStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_posterStateChanged
        VentanaInterna vi = (VentanaInterna) (desktop.getSelectedFrame());

        int m = poster.getValue();
        
        if (vi != null && originalImage != null) {
            BufferedImage img = vi.getCanvas().getImg(false);
            
            
            if(img!=null){
                try{
                   PosterizarOp posterOp = new PosterizarOp(m);
                   posterOp.filter(this.originalImage, img);
                    vi.getCanvas().repaint();
                    
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
        
    }//GEN-LAST:event_posterStateChanged

    private void posterFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_posterFocusGained
        this.focusGained();
    }//GEN-LAST:event_posterFocusGained

    private void posterFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_posterFocusLost
        this.focusLost();
    }//GEN-LAST:event_posterFocusLost

    private void redFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redFilterActionPerformed
         VentanaInterna vi = (VentanaInterna) (desktop.getSelectedFrame());
        
        if (vi != null) {
            BufferedImage img = vi.getCanvas().getImg(false);
               
            if(img!=null){
                try{
                   RedOp redOp = new RedOp(10);
                   redOp.filter(img, img);
                    vi.getCanvas().repaint();
                    
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_redFilterActionPerformed

    private void comboBoxContrastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxContrastActionPerformed
        VentanaInterna vi;
        vi = (VentanaInterna)desktop.getSelectedFrame();
        
        if(vi != null){
            if(comboBoxContrast.getSelectedItem() == "normal"){
                LookupTable table = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_SFUNCION);
                this.determineLookup(table);
            }
            else if(comboBoxContrast.getSelectedItem() == "iluminacion"){
                LookupTable table = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_LOGARITHM);
                this.determineLookup(table);
            }
            else if(comboBoxContrast.getSelectedItem() == "oscurecimiento"){
               LookupTable table = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_POWER);
               this.determineLookup(table);
            }
            else{
               byte negative[] = new byte[256];

               for (int i=0; i<256; i++){
                    negative[i] = (byte)(255-i);  
               }
        
               LookupTable table = new ByteLookupTable(0, negative);
               this.determineLookup(table); 
            }
        }
        
    }//GEN-LAST:event_comboBoxContrastActionPerformed

    private void tintSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tintSliderStateChanged

        VentanaInterna vi = (VentanaInterna) (desktop.getSelectedFrame());

        int m = tintSlider.getValue();
        float value = (float)(m*0.01);
        
        if (vi != null && originalImage != null) {
            BufferedImage img = vi.getCanvas().getImg(false);
            
            
            if(img!=null){
                try{
                    TintOp tintado = new TintOp((Color) this.comboBoxColors.getSelectedItem(),value);
                    tintado.filter(originalImage,img);
                    vi.getCanvas().repaint();
                    
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_tintSliderStateChanged

    private void tintSliderFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tintSliderFocusGained
       this.focusGained();
    }//GEN-LAST:event_tintSliderFocusGained

    private void tintSliderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tintSliderFocusLost
        this.focusLost();
    }//GEN-LAST:event_tintSliderFocusLost

    private void redSliderFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_redSliderFocusGained
        this.focusGained();
    }//GEN-LAST:event_redSliderFocusGained

    private void redSliderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_redSliderFocusLost
        this.focusLost();
    }//GEN-LAST:event_redSliderFocusLost

    private void redSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_redSliderStateChanged
        VentanaInterna vi = (VentanaInterna) (desktop.getSelectedFrame());

        int m = redSlider.getValue();
        
        if (vi != null && originalImage != null) {
            BufferedImage img = vi.getCanvas().getImg(false);
            
            
            if(img!=null){
                try{
                    RedOp redOp = new RedOp(m);
                    redOp.filter(originalImage, img);
                    vi.getCanvas().repaint();
                    
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_redSliderStateChanged

    private void seeStateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seeStateActionPerformed
        if(seeState.isSelected()){      /*Viendo el estado del checkBox oculta o no la etiqueta*/
            typeOfDraw.setVisible(true);
        }

        else{
            typeOfDraw.setVisible(false);
        }

    }//GEN-LAST:event_seeStateActionPerformed

    private void OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenActionPerformed
         FileFilter filterPhoto = new FileNameExtensionFilter("Imagenes[jpg, bpm, gif, png, wbmp, jpeg]", 
                            "jpg", "bpm", "gif", "png", "wbmp", "jpeg"); /*AÑADIMOS LAS EXTENSIONES PERMITIDAS DE IMAGEN*/
         
         FileFilter filterSound = new FileNameExtensionFilter("Audio[mid,wav,au]","mid","wav","au"); /*AÑADIMOS LAS EXTENSIONES PERMITIDAS DE SONIDO*/
         
          /*AÑADIMOS LAS EXTENSIONES DE VIDEO/AUDIO EMBEBIDO DE VLC*/
         FileFilter filterVideo= new FileNameExtensionFilter("Video[asf, avi, flv, mp4, mp3, ogg, mpeg-2, flac, mov, mpg]",
                 "asf","avi","flv","mp4","mp3","ogg","mpeg2","flac","mov","mpg");
        
        JFileChooser dlg = new JFileChooser();
        dlg.addChoosableFileFilter(filterPhoto); /*Añadimos el filtro creado*/
        dlg.addChoosableFileFilter(filterSound); /*Añadimos el filtro creado*/
        dlg.addChoosableFileFilter(filterVideo); /*Añadimos el filtro creado*/
        
        int resp = dlg.showOpenDialog(this);
        

        if( resp == JFileChooser.APPROVE_OPTION) {
            try{
                File f = dlg.getSelectedFile();
                
                
                String fileName = f.getName(); /*Guardamos el nombre del fichero*/
                
                if(fileName.contains(".jpg") | fileName.contains(".bpm") | fileName.contains(".gif") | fileName.contains(".png") | fileName.contains(".wbmp") |
                        fileName.contains(".jpeg")){ /*Estamos ante una imagen*/

                    BufferedImage img = ImageIO.read(f);
                    VentanaInterna vi = new VentanaInterna();
                    this.desktop.add(vi);
                    vi.setVisible(true);
                    vi.addInternalFrameListener(manejadorVI);
                    vi.getCanvas().setImg(img);
                    vi.getCanvas().addLienzoListener(manejadorCanvas);
                    
                    /*Obtenemos el espacio de color de la imagen*/
                    ColorSpace cs = img.getColorModel().getColorSpace();

                    vi.setTitle(f.getName()+"["+cs.toString()+"]");    
                }
                
                else if(fileName.contains(".mid") | fileName.contains(".wav") | fileName.contains(".au")){
                    
                    f = new File(dlg.getSelectedFile().getAbsolutePath()){
                    @Override
                        public String toString(){
                            return this.getName();
                        }
                    };
                    
                    this.playlist.addItem(f);
                    this.playlist.setSelectedItem(f);
                }
                
                else if(fileName.contains(".asf") | fileName.contains(".avi") | fileName.contains(".flv") | fileName.contains(".mp4") | fileName.contains(".mp3") | 
                        fileName.contains(".ogg") | fileName.contains(".mpeg2") | fileName.contains(".flac") | fileName.contains(".mov")
                        | fileName.contains(".mpg")){ /*Estamos ante una video*/
                   VentanaInternaVideo vv = VentanaInternaVideo.getInstance(f);
                   vv.addInternalFrameListener(manejadorVV);
                   vv.setTitle(f.getName());
                   this.desktop.add(vv);
                   vv.setVisible(true);
                   
                }
                
                else{
                   JOptionPane.showMessageDialog(this,"Formato del archivo no válido",
                        "Error: Formato incorrecto",JOptionPane.WARNING_MESSAGE); 
                }
                

            }
            
            catch(Exception ex){
                JOptionPane.showMessageDialog(this,"No se ha podido abrir el archivo",
                        "Error: Formato incorrecto",JOptionPane.WARNING_MESSAGE);
            }
            
        }
        
    }//GEN-LAST:event_OpenActionPerformed

    private void playActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playActionPerformed

        VentanaInternaVideo vv = (VentanaInternaVideo) desktop.getSelectedFrame();
        
        if(vv != null){ /*Vamos a reproducir video*/
          vv.play();
        }
        
        else{ /*Vamos a reproducir audio*/
            File f = (File) this.playlist.getSelectedItem();
            if (f != null) {

                if (player == null) {
                    /*Como está nulo, significa que vamos a reproducir el audio por primera vez*/

                    player = new SMClipPlayer(f);
                    if (player != null) {
                        player.addLineListener(new ManejadorAudio());
                        playing = true;
                        player.play();

                        double totalTime = (player.getClip().getMicrosecondLength() / 1000000.0);
                        int timeRounded = (int) Math.round(totalTime);

                        playingTime = new HebraTiempo(timeRounded);

                        playingTime.start();

                        Image image = new ImageIcon(this.getClass().getResource("/icons/iconos/pausa24x24.png")).getImage();

                        play.setIcon(new ImageIcon(image));
                    }
                } 
                
                else {
                    /*Player ya está definido, por lo que estamos pausando el audio*/
                    if (playing == true) {
                        /*Lo pausamos*/
                        Image image = new ImageIcon(this.getClass().getResource("/icons/iconos/play24x24.png")).getImage();

                        play.setIcon(new ImageIcon(image));
                        playing = false;
                        player.pause();
                        playingTime.pauseThread();

                    } 
                    
                    else {
                        /*Reanudamos el audio*/
                        Image image = new ImageIcon(this.getClass().getResource("/icons/iconos/pausa24x24.png")).getImage();

                        play.setIcon(new ImageIcon(image));
                        playing = true;
                        player.resume();
                        playingTime.resumeThread();
                    }
                }
            }
        }
        
 
    }//GEN-LAST:event_playActionPerformed

    private void stopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopActionPerformed
        VentanaInternaVideo vv = (VentanaInternaVideo) desktop.getSelectedFrame();

        if (vv != null) { /*Vamos a parar video*/
            vv.stop();
        }
        
        else{ /*Vamos a parar audio*/
            if (player != null) {
                player.stop();
                player = null;
                playing = false;
            }

            if (recorder != null) {
                recorder.stop();
                recorder = null;
            }
        }
        
        
    }//GEN-LAST:event_stopActionPerformed

    private void recordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recordActionPerformed
        /*Primero, para ver en que parte estamos, obtendremos los iconos*/
        Image imageStart = new ImageIcon(this.getClass().getResource("/icons/iconos/record24x24.png")).getImage();
        Image imageStop = new ImageIcon(this.getClass().getResource("/icons/iconos/stopRecord24x24.png")).getImage();

        ImageIcon start = new ImageIcon(imageStart);
        ImageIcon stop = new ImageIcon(imageStop);
        
        
        
        if(recording == false){
            /*Vamos a iniciar la grabación*/
            record.setIcon(stop);
            recording = true;
            
            try {
                /*Creamos el fichero temporal*/
                temporalFile = new File("temporalAudio");
                
                recorder = new SMSoundRecorder(temporalFile);
                
                if (recorder != null) {
                    recorder.addLineListener(new ManejadorAudio());
                    recorder.record();
                    
                    recordingTime = new HebraTiempo();
                    
                    recordingTime.start();
                    
                }

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this,"No se ha podido guardar el audio temporal",
                        "Error: Formato incorrecto",JOptionPane.WARNING_MESSAGE);

            }

        }
        
        else{   /*Vamos a parar la grabación*/
          record.setIcon(start);
          recorder.stop();
          recording = false;
          
          FileFilter filterSound = new FileNameExtensionFilter("Audio[mid,wav,au]","mid","wav","au"); /*AÑADIMOS LAS EXTENSIONES PERMITIDAS DE SONIDO*/

                    
          JFileChooser dlg = new JFileChooser();
          dlg.addChoosableFileFilter(filterSound); /*Añadimos el filtro creado*/
          
          int resp = dlg.showSaveDialog(this);

          
          if(resp == JFileChooser.APPROVE_OPTION){
              try{
                File f = dlg.getSelectedFile();
                temporalFile.renameTo(f);
              }
              
              catch(Exception e){
                 JOptionPane.showMessageDialog(this,"No se ha podido guardar el audio",
                        "Error: Formato incorrecto",JOptionPane.WARNING_MESSAGE); 
              }
              
          }
          
          if(resp == JFileChooser.CANCEL_OPTION){
              dlg.cancelSelection();
              temporalFile = null;
          }
          
          timeRecorded.setText("00:00");
          recorder = null;
          
          
        }
        
    }//GEN-LAST:event_recordActionPerformed

    private void cameraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cameraActionPerformed
        /*Creamos primero la ventana para elegir la calidad de la webcam*/
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TypeOfWebcamQuality.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TypeOfWebcamQuality.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TypeOfWebcamQuality.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TypeOfWebcamQuality.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        
        /* Create and display the dialog */
        
        TypeOfWebcamQuality dialog = new TypeOfWebcamQuality();
        dialog.addWindowListener(manejadorCa);
                    
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {

                dialog.setVisible(true);
            }
        });
         
    }//GEN-LAST:event_cameraActionPerformed

    private void screenshotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_screenshotActionPerformed
         VentanaInternaCamara vc = null;
         VentanaInternaVideo vv = null;
        if(desktop.getSelectedFrame().getClass().getName().contains("VentanaInternaCamara")){
            vc = (VentanaInternaCamara) desktop.getSelectedFrame();
        }
        
        else{
            vv = (VentanaInternaVideo) desktop.getSelectedFrame();
        }
        
        
        BufferedImage img = null ;
        
        if(vc != null | vv != null){
            
            if(vc != null){
                img = vc.getImage();
            }
            
            if(vv != null){
                img = vv.getImage();
            }
            
            VentanaInterna vi = new VentanaInterna();
            vi.setTitle("Captura");
            vi.getCanvas().setImg(img);
            desktop.add(vi);
            vi.setVisible(true);
        }
    }//GEN-LAST:event_screenshotActionPerformed

    private void duplicateCanvasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_duplicateCanvasActionPerformed
         VentanaInterna vi = (VentanaInterna)desktop.getSelectedFrame();

        if(vi!=null){
            ColorModel cm = vi.getCanvas().getImg(true).getColorModel();
            WritableRaster raster = vi.getCanvas().getImg(true).copyData(null);
            boolean alfaPre = vi.getCanvas().getImg(true).isAlphaPremultiplied();
            originalImage = new BufferedImage(cm,raster,alfaPre,null);
            
            if(originalImage != null){
                VentanaInterna newVi = new VentanaInterna();
                desktop.add(newVi);
                newVi.setVisible(true);
        
                newVi.addInternalFrameListener(manejadorVI);
                
        
        
                newVi.getCanvas().setImg(originalImage);
                newVi.getCanvas().addLienzoListener(manejadorCanvas);

                originalImage = null;   
            }
        }  
    }//GEN-LAST:event_duplicateCanvasActionPerformed

    private void typeOfLineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeOfLineActionPerformed
        VentanaInterna vi = (VentanaInterna)desktop.getSelectedFrame();
        String type = this.typeOfLine.getSelectedItem().toString();
        
        if(vi != null){
            vi.getCanvas().setPattern(type);
        }
        
    }//GEN-LAST:event_typeOfLineActionPerformed

    private void transparencySliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_transparencySliderStateChanged
        int value = transparencySlider.getValue();
        float realValue = value/100.0F;
        
        VentanaInterna vi = (VentanaInterna)desktop.getSelectedFrame();
        
        if(vi != null){
            vi.getCanvas().setTransparency(realValue);
        }
    }//GEN-LAST:event_transparencySliderStateChanged

    private void seeAudiovideoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seeAudiovideoActionPerformed
        if(seeAudiovideo.isSelected() == true){
            toolBarAudioVideo.setVisible(true);
        }
        
        else{
            toolBarAudioVideo.setVisible(false);

        }
    }//GEN-LAST:event_seeAudiovideoActionPerformed

    private void seeOperationsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seeOperationsActionPerformed
        if(seeOperations.isSelected() == true){
            toolBarOperations.setVisible(true);
        }
        
        else{
            toolBarOperations.setVisible(false);

        }
    }//GEN-LAST:event_seeOperationsActionPerformed

    private void newColorFillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newColorFillActionPerformed
        /*Abrimos el jColorChooser, estableciendo siempre como color inicial el negro*/
        Color newColor = JColorChooser.showDialog(null, "Select Fill Color", Color.BLACK);
        this.newColorFill.setBackground(newColor);
        
        this.comboBoxColors.setSelectedItem(newColor);   /*Si el color está en la lista original, lo cambiamos*/
        
        VentanaInterna vi = (VentanaInterna)desktop.getSelectedFrame();
        if(vi != null){
            vi.getCanvas().setRefillColor(newColor);
        }
        
    }//GEN-LAST:event_newColorFillActionPerformed

    private void newColorBorderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newColorBorderActionPerformed
       /*Abrimos el jColorChooser, estableciendo siempre como color inicial el negro*/
        Color newColor = JColorChooser.showDialog(null, "Select Fill Color", Color.BLACK);
        this.newColorBorder.setBackground(newColor);
        
        this.comboBoxBorder.setSelectedItem(newColor);   /*Si el color está en la lista original, lo cambiamos*/
        
        VentanaInterna vi = (VentanaInterna)desktop.getSelectedFrame();
        if(vi != null){
            vi.getCanvas().setColor(newColor);
        }
        
    }//GEN-LAST:event_newColorBorderActionPerformed

    private void transparencySliderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_transparencySliderFocusLost
        this.focusLost();
    }//GEN-LAST:event_transparencySliderFocusLost

    private void transparencySliderFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_transparencySliderFocusGained
    }//GEN-LAST:event_transparencySliderFocusGained

    private void comboBoxGradientTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxGradientTypeActionPerformed
       VentanaInterna vi = (VentanaInterna) (desktop.getSelectedFrame());
        String value = comboBoxGradientType.getSelectedItem().toString();
        
        if(vi != null){
            if(this.gradientButton.isSelected() == true){
                vi.getCanvas().setGradient(value);  
            }
        }

    }//GEN-LAST:event_comboBoxGradientTypeActionPerformed

    private void impressFiguresInCanvasButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_impressFiguresInCanvasButtonActionPerformed
     VentanaInterna vi = (VentanaInterna) (desktop.getSelectedFrame());
        
        if(vi != null){
         BufferedImage imgSaved = vi.getCanvas().getImg(true);
         vi.getCanvas().setImg(imgSaved);
         vi.getCanvas().cleanShapeList();
         vi.getCanvas().setEdit(false);
         vi.getCanvas().setCurrentFigure(figure.NULL);
         shapeOptionsGroup.clearSelection();
        }
        
    }//GEN-LAST:event_impressFiguresInCanvasButtonActionPerformed

    private void comboBoxBorderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxBorderActionPerformed
        VentanaInterna vi;
            vi = (VentanaInterna)desktop.getSelectedFrame();

            if(vi != null){
                if(comboBoxBorder.getSelectedItem() == Color.YELLOW){
                  vi.getCanvas().setColor(Color.yellow);  
                }
                else if(comboBoxBorder.getSelectedItem() == Color.RED){
                  vi.getCanvas().setColor(Color.red);  
                }
                else if(comboBoxBorder.getSelectedItem() == Color.BLUE){
                  vi.getCanvas().setColor(Color.blue);  
                }
                else if(comboBoxBorder.getSelectedItem() == Color.GREEN){
                  vi.getCanvas().setColor(Color.green);  
                }
                else if(comboBoxBorder.getSelectedItem() == Color.WHITE){
                  vi.getCanvas().setColor(Color.white);  
                }
                else{
                  vi.getCanvas().setColor(Color.black);  
                }
            }
    }//GEN-LAST:event_comboBoxBorderActionPerformed

    private void gradientButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gradientButtonActionPerformed
        VentanaInterna vi = (VentanaInterna)desktop.getSelectedFrame();
        
        if(vi != null){
            if(this.gradientButton.isSelected() == false){
                vi.getCanvas().setGradient("null");
            }
            
            else{
                vi.getCanvas().setGradient(this.comboBoxGradientType.getSelectedItem().toString());
            }
        }

    }//GEN-LAST:event_gradientButtonActionPerformed

    private void neewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_neewActionPerformed
        this.newFileActionPerformed(evt);
    }//GEN-LAST:event_neewActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        this.saveFileActionPerformed(evt);
    }//GEN-LAST:event_saveActionPerformed

    private void aboutMeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMeActionPerformed

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(aboutMe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(aboutMe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(aboutMe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(aboutMe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        
        aboutMe dialog = new aboutMe();
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                dialog.setVisible(true);
            }
        });

    }//GEN-LAST:event_aboutMeActionPerformed

    /*Función del suavizado del negativo */
    private void softNegativeSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_softNegativeSliderStateChanged
        VentanaInterna vi = (VentanaInterna) (desktop.getSelectedFrame());
        int m = this.softNegativeSlider.getValue();
        
        LookupTable table = this.softNegative(m);
        
        if (vi != null && originalImage != null) {
            BufferedImage img = vi.getCanvas().getImg(false);
            
            
            if(img!=null){
               try{
                    
                    LookupOp lop = new LookupOp(table,null);
                    BufferedImage imgdest = lop.filter(originalImage,img);
                    vi.getCanvas().setImg(imgdest);
                    vi.getCanvas().repaint();
                    
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                } 
            }
        }
    }//GEN-LAST:event_softNegativeSliderStateChanged

    private void softNegativeSliderFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_softNegativeSliderFocusGained
        this.focusGained();
    }//GEN-LAST:event_softNegativeSliderFocusGained

    private void softNegativeSliderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_softNegativeSliderFocusLost
        this.focusLost();
    }//GEN-LAST:event_softNegativeSliderFocusLost

    private void redToPurpleSliderFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_redToPurpleSliderFocusGained
        this.focusGained();
    }//GEN-LAST:event_redToPurpleSliderFocusGained

    private void redToPurpleSliderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_redToPurpleSliderFocusLost
        this.focusLost();
    }//GEN-LAST:event_redToPurpleSliderFocusLost

    private void redToPurpleSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_redToPurpleSliderStateChanged
         VentanaInterna vi = (VentanaInterna) (desktop.getSelectedFrame());

        int m = redToPurpleSlider.getValue();
        
        if (vi != null && originalImage != null) {
            BufferedImage img = vi.getCanvas().getImg(false);
            
            
            if(img!=null){
                try{
                    redToPurple redToPurple = new redToPurple(m);
                    redToPurple.filter(originalImage, img);
                    vi.getCanvas().repaint();
                    
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_redToPurpleSliderStateChanged

    /**
     * Método para que dada una imágen y el número de
     * una banda, la extraiga
     * @param img imagen a usar
     * @param banda banda a extraer
     * @return BufferedImage solo con esa banda
     */
    private BufferedImage getImageBand(BufferedImage img, int banda) {

        
        ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);
        ComponentColorModel cm = new ComponentColorModel(cs, false, false,Transparency.OPAQUE,DataBuffer.TYPE_BYTE);

        int vband[] = {banda};
        WritableRaster bRaster = (WritableRaster) img.getRaster().createWritableChild(0, 0,img.getWidth(), img.getHeight(), 0, 0, vband);

        return new BufferedImage(cm, bRaster, false, null);
    }
    
    /**
     * Método para realizar el escalado de una figura
     * @param scale flotante con el factor de escalado
     * (mayor que 1.0F la aumenta; menor, la disminuye)
     */
    private void doScale(float scale){
        VentanaInterna vi = (VentanaInterna) (desktop.getSelectedFrame());

        if (vi != null) {
            BufferedImage img = vi.getCanvas().getImg(false);

            if(img!=null){
                try{
                    AffineTransform at = AffineTransform.getScaleInstance(scale,scale);
                    AffineTransformOp atop = new AffineTransformOp(at,null);
                    BufferedImage imgdest = atop.filter(img, null);
                    vi.getCanvas().setImg(imgdest);
                    vi.getCanvas().repaint();
                } 
                catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }
    
    /**
     * Método para crear una copia de la imagen
     * original del lienzo para poder trabajar 
     * con ella sin modificar la original
     */
    private void focusGained(){
        VentanaInterna vi = (VentanaInterna)(desktop.getSelectedFrame());

        if(vi!=null){
            ColorModel cm = vi.getCanvas().getImg(false).getColorModel();
            WritableRaster raster = vi.getCanvas().getImg(false).copyData(null);
            boolean alfaPre = vi.getCanvas().getImg(false).isAlphaPremultiplied();
            originalImage = new BufferedImage(cm,raster,alfaPre,null);
        }
    }
    
    /**
     * Método para volver a poner correctamente los sliders
     * cuando pierden el foco
     */
    private void focusLost(){
        this.originalImage = null;
        this.RescaleSlider.setValue(0);
        this.rotationSlider.setValue(0);
        this.mSlider.setValue(128);
        this.poster.setValue(11);
        this.tintSlider.setValue(50);
        this.redSlider.setValue(128);
        this.transparencySlider.setValue(50);
        this.softNegativeSlider.setValue(128);
        this.redToPurpleSlider.setValue(128);
    }

    /**
     * Método que dada una tabla lookUp aplica el filtro a una imagen
     * @param table tabla LookUp a usar
     */
    private void determineLookup(LookupTable table){
        VentanaInterna vi = (VentanaInterna) desktop.getSelectedFrame();

        if (vi != null) {
            BufferedImage img = vi.getCanvas().getImg(false);

            if(img!=null){
                try{
                            
                    LookupOp lop = new LookupOp(table, null);

                    lop.filter(img, img);
                    vi.getCanvas().repaint();
                    
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }
    
    /**
     * Método para hacer una rotación a una imagen
     * @param degrees grados a rotar la imagen
     */
    private void doRotation(int degrees){
        VentanaInterna vi = (VentanaInterna) desktop.getSelectedFrame();

        if (vi != null) {
            BufferedImage img = vi.getCanvas().getImg(false);

            if(img!=null){
                try{
                    
                     AffineTransform at = AffineTransform.getRotateInstance(Math.toRadians(degrees),img.getWidth()/2,img.getHeight()/2);
                    AffineTransformOp atop = new AffineTransformOp(at,null);
                    BufferedImage imgdest = atop.filter(img, null);
                    vi.getCanvas().setImg(imgdest);
                    vi.getCanvas().repaint();
                    
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }
    
    /**
     * Método para obtener los kernels para la convolución 
     * @param selected elemento de la lista seleccionado
     * @return Kernel kernel listo para usar
     */
    private Kernel getKernel(int selected){
        Kernel k = null;
            
            if(selected == 0){
               k = KernelProducer.createKernel(KernelProducer.TYPE_MEDIA_3x3);
            }
       
            else if(selected == 1){
              float filtro[] = {0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 
                                0.1f, 0.1f, 0.1f, 0.1f, 0.1f,
                                0.1f, 0.1f, 0.2f, 0.1f, 0.1f,
                                0.1f, 0.1f, 0.1f, 0.1f, 0.1f,
                                0.1f, 0.1f, 0.1f, 0.1f, 0.1f,};
              
              k = new Kernel(5, 5, filtro);  
            }
            
            else if(selected == 2){
              float filtro[] = {0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f,
                                0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f,
                                0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f,
                                0.1f, 0.1f, 0.1f, 0.2f, 0.1f, 0.1f, 0.1f,
                                0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f,
                                0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f,
                                0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f};
              
              k = new Kernel(7, 7, filtro);  
            }
            
            else if(selected == 3){
             k = KernelProducer.createKernel(KernelProducer.TYPE_BINOMIAL_3x3);   
            }
             
            else if(selected == 4){
             k = KernelProducer.createKernel(KernelProducer.TYPE_ENFOQUE_3x3);   
            }
            
            else if(selected == 5){
             k = KernelProducer.createKernel(KernelProducer.TYPE_RELIEVE_3x3);   
            }
            
            else{
             k = KernelProducer.createKernel(KernelProducer.TYPE_LAPLACIANA_3x3);   
            }
            
        return k;
    }
    
    /**
     * Método para calcular la función cuadrática
     * @param m valor del botón/slider
     * @return LookupTable con la operación ya realizado
     */
    private LookupTable square(double m){
        byte functionSquare[] = new byte[256];
        double K;
        
        if(m >= 128){
            K = 255.0/((1/100.0)*Math.pow(-m,2));
        }
        else{
            K = 255.0/((1/100.0)*Math.pow(255-m,2)); 
        }
        
        for(int i = 0; i < 256; i++){
            functionSquare[i] = (byte)(K*((1/100.0)*Math.pow(i-m,2)));
        }
        
        LookupTable table = new ByteLookupTable(0,functionSquare);
        
        return table;
    }
    
    /**
     * Método de negativo suavizado
     * @param m valor del botón/slider
     * @return LookupTable tabla con la operación ya realizada
     */
     private LookupTable softNegative(double m){
        //function: ((log(x)-(x+1)^2)/m)+255;

        byte tabla[] = new byte[256];
        for(int i = 0; i < 256; i++){
            tabla[i] = (byte)(((((Math.log10(i)-(i+1)*(i+1))/m)+255)));
        }
        LookupTable tab = new ByteLookupTable(0,tabla);
        return tab;
    }
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu File;
    private javax.swing.JMenuItem Open;
    private javax.swing.JSlider RescaleSlider;
    private javax.swing.JMenuItem Resize;
    private javax.swing.JMenuItem aboutMe;
    private javax.swing.JButton bandCombine;
    private javax.swing.JPanel bottomPanel;
    private javax.swing.JButton camera;
    private javax.swing.JComboBox<String> changeColorSpace;
    private javax.swing.JComboBox<Color> comboBoxBorder;
    private javax.swing.JComboBox<Color> comboBoxColors;
    private javax.swing.JComboBox<String> comboBoxContrast;
    private javax.swing.JComboBox<String> comboBoxGradientType;
    private javax.swing.JLabel coordinates;
    private javax.swing.JDesktopPane desktop;
    private javax.swing.JButton duplicateCanvas;
    private javax.swing.JToggleButton edit;
    private javax.swing.JMenu edition;
    private javax.swing.JButton equalize;
    private javax.swing.ButtonGroup fileOptionsGroup;
    private javax.swing.JToggleButton gradientButton;
    private javax.swing.JMenu help;
    private javax.swing.JMenu image;
    private javax.swing.JButton impressFiguresInCanvasButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator10;
    private javax.swing.JToolBar.Separator jSeparator11;
    private javax.swing.JToolBar.Separator jSeparator12;
    private javax.swing.JToolBar.Separator jSeparator13;
    private javax.swing.JToolBar.Separator jSeparator14;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JToolBar.Separator jSeparator6;
    private javax.swing.JToolBar.Separator jSeparator7;
    private javax.swing.JToolBar.Separator jSeparator8;
    private javax.swing.JToolBar.Separator jSeparator9;
    private javax.swing.JToggleButton line;
    private javax.swing.JSlider mSlider;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem neew;
    private javax.swing.JButton newColorBorder;
    private javax.swing.JButton newColorFill;
    private javax.swing.JButton newFile;
    private javax.swing.JButton openFile;
    private javax.swing.JToggleButton oval;
    private javax.swing.JButton play;
    private javax.swing.JComboBox<File> playlist;
    private javax.swing.JSlider poster;
    private javax.swing.JButton record;
    private javax.swing.JToggleButton rectangle;
    private javax.swing.JButton redFilter;
    private javax.swing.JSlider redSlider;
    private javax.swing.JSlider redToPurpleSlider;
    private javax.swing.JToggleButton refill;
    private javax.swing.JButton rotate180;
    private javax.swing.JButton rotate270;
    private javax.swing.JButton rotate90;
    private javax.swing.JSlider rotationSlider;
    private javax.swing.JMenuItem save;
    private javax.swing.JButton saveFile;
    private javax.swing.JButton scaleBigger;
    private javax.swing.JButton scaleSmaller;
    private javax.swing.JButton screenshot;
    private javax.swing.JCheckBoxMenuItem seeAudiovideo;
    private javax.swing.JCheckBoxMenuItem seeOperations;
    private javax.swing.JCheckBoxMenuItem seeShapes;
    private javax.swing.JCheckBoxMenuItem seeState;
    private javax.swing.JComboBox<String> selectMask;
    private javax.swing.JButton sepia;
    private javax.swing.ButtonGroup shapeOptionsGroup;
    private javax.swing.JButton showBands;
    private javax.swing.JToggleButton smooth;
    private javax.swing.JSlider softNegativeSlider;
    private javax.swing.JSpinner spinner;
    private javax.swing.JButton squareButton;
    private javax.swing.JButton stop;
    private javax.swing.JLabel timePlayed;
    private javax.swing.JLabel timeRecorded;
    private javax.swing.JButton tint;
    private javax.swing.JSlider tintSlider;
    private javax.swing.JToolBar toolBar;
    private javax.swing.JToolBar toolBarAudioVideo;
    private javax.swing.JToolBar toolBarOperations;
    private javax.swing.JToggleButton transparency;
    private javax.swing.JSlider transparencySlider;
    private javax.swing.JLabel typeOfDraw;
    private javax.swing.JComboBox<String> typeOfLine;
    // End of variables declaration//GEN-END:variables
}
