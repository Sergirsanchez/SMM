/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package practica7srs;

import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import java.awt.image.BufferedImage;
import java.io.File;
import uk.co.caprica.vlcj.binding.LibVlc;
import uk.co.caprica.vlcj.component.EmbeddedMediaPlayerComponent;
import uk.co.caprica.vlcj.player.embedded.EmbeddedMediaPlayer;
import uk.co.caprica.vlcj.runtime.RuntimeUtil;

/**
 *Clase relativa a la ventana de video
 * @author Sergi Ruiz Sánchez
 */
public class VentanaInternaVideo extends javax.swing.JInternalFrame {
    //Atributos
    /**
     * Reproductor embebido
     */
    private EmbeddedMediaPlayer vlcplayer = null;  
    /**
     * fichero a reproducir
     */
    private File fMedia;    
    
    /**
     * Constructor; Damos un fichero, lo guardamos y construimos la ventana
     * visual que vamos a utilizar para verlo.
     * @param f fichero a visionar
     */
    private VentanaInternaVideo(File f) {
        
        NativeLibrary.addSearchPath(RuntimeUtil.getLibVlcLibraryName(),"C:\\Program Files\\VideoLAN\\VLC");
        Native.loadLibrary(RuntimeUtil.getLibVlcLibraryName(), LibVlc.class);
        
        initComponents();
        fMedia = f;
        
        EmbeddedMediaPlayerComponent aVisual= new EmbeddedMediaPlayerComponent();
        getContentPane().add(aVisual, java.awt.BorderLayout.CENTER);
        vlcplayer = aVisual.getMediaPlayer();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        setBounds(0, 0, 405, 307);
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        if(vlcplayer != null){
            vlcplayer.stop();
            vlcplayer = null;
        }
    }//GEN-LAST:event_formInternalFrameClosing


    /**
     * Como el constructor es privado, llamaremos a este
     * método cada vez que queramos construir un objeto
     * @param f fichero a visionar
     * @return el player si todo fue correcto; null en caso contrario
     */
    public static VentanaInternaVideo getInstance(File f) {
        VentanaInternaVideo v = new VentanaInternaVideo(f);
        return (v.vlcplayer != null ? v : null);
    }
    
    /**
     * Método que en el caso de ejecutarlo por primera vez
     * asocia el fichero a la ventana, comenzando su reproduccion;
     * si no es la primera, reanuda su visionado
     * 
     */
    public void play() {
        if (vlcplayer != null) {
            if (vlcplayer.isPlayable()) {
                //Si se estaba reproduciendo
                vlcplayer.play();
            } 
            
            else {
                vlcplayer.playMedia(fMedia.getAbsolutePath());
            }
        }
    }

    /**
     * Método para pausar o detener la reproducción
     * del video
     */
    public void stop() {
        if (vlcplayer != null) {
            
            if (vlcplayer.isPlaying()) {
                vlcplayer.pause();
            } 
            
            else {
                vlcplayer.stop();
            }
        }
    }
    
    /**
     * Método que nos permite obtener una 
     * instantánea del frame que se estaba
     * viendo en ese momento
     * @return BufferedImage con la captura
     * de pantalla
     */
    public BufferedImage getImage(){
        return (vlcplayer != null? vlcplayer.getSnapshot() : null); 
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
